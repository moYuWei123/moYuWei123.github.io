<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>致敬英雄</title>
      <link href="/2020/04/04/zhi-jing-ying-xiong/"/>
      <url>/2020/04/04/zhi-jing-ying-xiong/</url>
      
        <content type="html"><![CDATA[<h1 id="致敬英雄"><a href="#致敬英雄" class="headerlink" title="致敬英雄"></a>致敬英雄</h1><p>  今天是2020年4月4日清明节，2020发生了很多不好的事情，但是一切终会过去，生活依然美好</p><p>  疾病与灾难都会成为岁月的尘埃。总会有一天，这里没有歇斯底里的哭喊，没有绝望与黑暗，春风会吹开这里的樱花，疾病肆虐过的冰冷土地下，是即将破土而出的春天。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue常用ui框架</title>
      <link href="/2019/05/27/vueui-kuang-jia/"/>
      <url>/2019/05/27/vueui-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="vue常用ui框架"><a href="#vue常用ui框架" class="headerlink" title="vue常用ui框架"></a>vue常用ui框架</h2><p>pc端<code>element</code><br>移动端 <code>vant cube</code></p><h2 id="为什么使用ui框架"><a href="#为什么使用ui框架" class="headerlink" title="为什么使用ui框架"></a>为什么使用ui框架</h2><p>使用别人封装好的框架 可以大大的节省开发时间 提升开发效率<br>缺点也很明显 不能定制需要 有时候与设计图差异大<br>当对样式没有很大需求的时候(后台管理系统)</p><h3 id="pc端ui框架-element"><a href="#pc端ui框架-element" class="headerlink" title="pc端ui框架 element"></a>pc端ui框架 element</h3><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。<br>它的开发团队是饿了么。</p><h3 id="element安装"><a href="#element安装" class="headerlink" title="element安装"></a>element安装</h3><p><code>vue-cli3.x</code>安装参考下面地址<br><a href="https://github.com/ElementUI/vue-cli-plugin-elemen2t" target="_blank" rel="noopener" title="vue3.x安装方法">vue3.x安装方法</a></p><h3 id="npm-安装element-ui框架"><a href="#npm-安装element-ui框架" class="headerlink" title="npm 安装element ui框架"></a>npm 安装element ui框架</h3><ul><li><p><code>cnpm install  element-ui --save</code> 等价 <code>npm i element-ui -S</code></p></li><li></li></ul><h3 id="vue-cli的项目引入element的两种方式"><a href="#vue-cli的项目引入element的两种方式" class="headerlink" title="vue-cli的项目引入element的两种方式"></a>vue-cli的项目引入element的两种方式</h3><p><code>element-ui</code>安装后提供两种引入方式，全局引入以及按需引入，整个element-ui大概有1M左右，如果我们只需要几个组件(例如button)，这个时候全局引入就有些不合适了,按需引入可以很好的减少打包后的体积。</p><ul><li>全局引入 推荐<br>把ui框架一次性的导入 <ul><li>好处 全部导入 节省了引用组件时的代码</li><li>坏处 全部导入 有的组件用不到 就增加了项目的体积 </li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 全局引用的方式 --></span>import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';Vue.use(ElementUI);</code></pre><ul><li><p>按需引入  </p><p>把需要的组件引入 不需要的就不导入 打包项目的打包仅仅是引用的组件 大大减少了打包时的体积<br>坏处 每次引入的时候需要写一些额外的代码  </p></li></ul><p><code>npm install babel-plugin-component -D</code></p><p>在babel.config.js里面加下面一段就可以<br><a href="https://element.eleme.cn/2.10/#/zh-CN/component/quickstart" target="_blank" rel="noopener" title="按需引入参考">按需引入参考</a></p><pre class=" language-html"><code class="language-html">"plugins": [    [      "component",      {        "libraryName": "element-ui",        "styleLibraryName": "theme-chalk"      }    ]  ]</code></pre><p><img src="./imgs/img1.jpg" alt="vue引入方式" title="vue引入方式"></p><h2 id="element开始"><a href="#element开始" class="headerlink" title="element开始"></a>element开始</h2><h3 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h3><p>layout把页面分为24份，采用百分比布局<br>通过 row 和 col 组件，并通过 col 组件的 span 属性我们就可以自由地组合布局。</p><ul><li>row组件<br>row组件为容器组件 在这个组件里面可以设置子元素之间的间隔<br>起作用的是给每个子组件设置内联样式<code>padding-left:10px;padding-right:10px;</code><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">:gutter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span></code></pre></li><li>col组件<br>col组件是布局组件<br><code>&lt;el-col :span=&quot;24&quot;&gt;&lt;/el-col&gt;</code> 这个el-col就占页面的<code>100%</code>,<code>&lt;el-col :span=&quot;23&quot;&gt;&lt;/el-col&gt;</code>,这个el-col就占页面的<code>95.83333%</code></li><li>分栏偏移<br>元素偏移多少单位 通过制定 col 组件的 offset 属性可以指定分栏偏移的栏数。也是百分比偏移 <code>margin-left:25%;</code><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">:gutter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">:offset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span></code></pre><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3>element 预设了五个响应尺寸：xs、sm、md、lg 和 xl。采当用媒体查询 显示区域在某个范围内时使用某一个尺寸</li><li>mobile – xs ( &lt;768px ) 如iphonex  750px</li><li>tablet – sm ( 768~991px )  ipad</li><li>desktop – md ( 992~1199px ) 老式的电脑 比如大学学校电脑正方体的屏幕</li><li>large desktop – lg ( 1200px~1900px ) 笔记本到台式电脑</li><li>xl  (&gt;1900px ) 超大电脑屏幕<br>如下面这段  在xs时占33.333%;在sm的时候占25%；在md时占16.666%；在lg时占12.5%；在xl时占4.16%；<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">:gutter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:xs</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">:sm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">:md</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">:lg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">:xl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid-content bg-purple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span></code></pre><h3 id="基于断点的隐藏类"><a href="#基于断点的隐藏类" class="headerlink" title="基于断点的隐藏类"></a>基于断点的隐藏类</h3>使用方法 <code>class=&quot;hidden-xs-only&quot;</code><br><code>only</code> 当在某个尺寸时隐藏<br><code>and-down</code> 在某个尺寸下隐藏<br><code>and-up</code> 在某个尺寸上隐藏</li><li>hidden-xs-only - 当视口在 xs 尺寸时隐藏</li><li>hidden-sm-only - 当视口在 sm 尺寸时隐藏</li><li>hidden-sm-and-down - 当视口在 sm 及以下尺寸时隐藏</li><li>hidden-sm-and-up - 当视口在 sm 及以上尺寸时隐藏</li><li>hidden-md-only - 当视口在 md 尺寸时隐藏</li><li>hidden-md-and-down - 当视口在 md 及以下尺寸时隐藏</li><li>hidden-md-and-up - 当视口在 md 及以上尺寸时隐藏</li><li>hidden-lg-only - 当视口在 lg 尺寸时隐藏</li><li>hidden-lg-and-down - 当视口在 lg 及以下尺寸时隐藏</li><li>hidden-lg-and-up - 当视口在 lg 及以上尺寸时隐藏</li><li>hidden-xl-only - 当视口在 xl 尺寸时隐藏<h3 id="Container-布局容器"><a href="#Container-布局容器" class="headerlink" title="Container 布局容器"></a>Container 布局容器</h3>鸡肋<br><code>&lt;el-container&gt;</code>：外层容器。当子元素中包含 <code>&lt;el-header&gt;</code> 或 <code>&lt;el-footer&gt;</code> 时，全部子元素会垂直上下排列，否则会水平左右排列。</li></ul><p><code>&lt;el-header&gt;</code>：顶栏容器。</p><p><code>&lt;el-aside&gt;</code>：侧边栏容器。</p><p><code>&lt;el-main&gt;</code>：主要区域容器。</p><p><code>&lt;el-footer&gt;</code>：底栏容器。</p><blockquote><p>以上组件采用了 flex 布局，使用前请确定目标浏览器是否兼容。此外，<code>&lt;el-container&gt;</code> 的子元素只能是后四者，后四者的父元素也只能是 <code>&lt;el-container&gt;</code>。</p></blockquote><h3 id="icon-图标"><a href="#icon-图标" class="headerlink" title="icon 图标"></a>icon 图标</h3><p>element内置了一些icon图标 直接通过设置类名为 el-icon-iconName 来使用即可。例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-share<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre><p><img src="./imgs/icon.jpg" alt="vue内置icon图标" title="vue内置icon图标"></p><h3 id="button-按钮"><a href="#button-按钮" class="headerlink" title="button 按钮"></a>button 按钮</h3><p>element 使用<code>type、plain、round和circle</code>属性来定义 Button 的样式。</p><ul><li><code>type</code> 定义按钮的样式<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre></li><li><code>plain</code> 定义按钮是否为朴素按钮<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre></li><li><code>round</code> 定义按钮是否为圆角<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">round</span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre></li><li><code>circle</code> 定义按钮为圆形<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span> <span class="token attr-name">circle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre><img src="./imgs/button.jpg" alt="vue button按钮" title="vue button按钮"></li></ul><h3 id="Link-文字链接"><a href="#Link-文字链接" class="headerlink" title="Link 文字链接"></a>Link 文字链接</h3><p>文字超链接 不可以用作跳转</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://element.eleme.io<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>警告链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>危险链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-link</span><span class="token punctuation">></span></span></code></pre><p><img src="./imgs/link.jpg" alt="vue link文字链接" title="vue link文字链接"></p><h3 id="Radio-单选框"><a href="#Radio-单选框" class="headerlink" title="Radio 单选框"></a>Radio 单选框</h3><p>在一组备选项中进行单选</p><h3 id="Checkbox-多选框"><a href="#Checkbox-多选框" class="headerlink" title="Checkbox 多选框"></a>Checkbox 多选框</h3><p>一组备选项中进行多选</p><h3 id="Input-输入框"><a href="#Input-输入框" class="headerlink" title="Input 输入框"></a>Input 输入框</h3><p>通过鼠标或键盘输入字符</p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><h3 id="element表单自定义验证"><a href="#element表单自定义验证" class="headerlink" title="element表单自定义验证"></a>element表单自定义验证</h3><p>在防止用户犯错的前提下，尽可能让用户更早地发现并纠正错误。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- :model是绑定表单的属性  --></span>    <span class="token comment" spellcheck="true">&lt;!-- status-icon属性为输入侧框添加了表示校验查询查询结果的反馈图标。 --></span>    <span class="token comment" spellcheck="true">&lt;!-- rules是自定义的验证规则 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 更多校验规则参考 async-validator  https://github.com/yiminghe/async-validator --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">status-icon</span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-ruleForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- props是对应的那种校验规则 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.pass<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认密码<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkPass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.checkPass<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>年龄<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ruleForm.age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 既然用了element的表单验证规则 那么提交的时候也要用它定义的方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitForm(<span class="token punctuation">'</span>ruleForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 重置表单 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resetForm(<span class="token punctuation">'</span>ruleForm<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 检测年龄 </span>      <span class="token keyword">var</span> checkAge <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'年龄不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入数字值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'必须年满18岁'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 检测输入的密码</span>      <span class="token keyword">var</span> validatePass <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入密码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>checkPass <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span><span class="token function">validateField</span><span class="token punctuation">(</span><span class="token string">'checkPass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 检测密码是否重复</span>      <span class="token keyword">var</span> validatePass2 <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请再次输入密码'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'两次输入密码不一致!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        ruleForm<span class="token punctuation">:</span> <span class="token punctuation">{</span>          pass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          checkPass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>          pass<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validatePass<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// validator是验证规则  trigger是触发方式  如blue或change </span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          checkPass<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validatePass2<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> checkAge<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">submitForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'submit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error submit!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">resetForm</span><span class="token punctuation">(</span>formName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Avenir'</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2c3e50</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#nav</span> </span><span class="token punctuation">{</span>  <span class="token selector">padding: 30px;  a </span><span class="token punctuation">{</span>    <span class="token selector">font-weight: bold;    color: <span class="token id">#2c3e50</span>;    &amp;<span class="token class">.router-link-exact-active</span> </span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#42b983</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.el-col</span> </span><span class="token punctuation">{</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bg-purple-dark</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#99a9bf</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bg-purple</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#d3dce6</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bg-purple-light</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#e5e9f2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.grid-content</span> </span><span class="token punctuation">{</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">36</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="自定义表单验证步骤"><a href="#自定义表单验证步骤" class="headerlink" title="自定义表单验证步骤"></a>自定义表单验证步骤</h3><ol><li>在 el-form 表单里面添加需要校验的 规则(<code>rules</code>)  <code>&lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot; :rules=&quot;rulesname&quot;&gt;</code></li><li>在表单的每一项 添加需要校验的属性<br><code>&lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;&lt;el-input v-model=&quot;form.username&quot;&gt;&lt;/el-input&gt;&lt;/el-form-item&gt;</code><br>这一步需要检验的是 username  所以需要把这个username 添加到表单对应的这一项上面 同时 加个属性prop prop对应的值就是需要校验的属性</li></ol><ol start="3"><li><p>书写自定义校验规则  <code>rulesname</code>  里面的username  pass 就是校验的每一项 对应prop</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">rulesname<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 校验规则</span> username<span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token comment" spellcheck="true">// validator 校验规则 trigger 表单类型的触发方式 blur</span>   <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validateusername<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> pass<span class="token punctuation">:</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validatepass<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>实现校验规则 validator 的值就是校验规则 validateusername 这个函数需要自己手写 这个校验函数 写在data 里面的return 上面</p></li><li><p>注意事项  validateusername 函数里面的callback  就是返回的校验信息  <code>return callback(new Error(&#39;密码长度不能小于6&#39;));</code>  如果校验成功 什么都不返回 </p></li></ol><h3 id="分页-table"><a href="#分页-table" class="headerlink" title="分页 table"></a>分页 table</h3><p>elementui实现表格增删改查</p><h3 id="移动端框架-vant"><a href="#移动端框架-vant" class="headerlink" title="移动端框架 vant"></a>移动端框架 vant</h3><p><strong>* 别用mint 几年没更新了 从网上找插件时千万别找那种几年没更新的项目 *</strong><br>轻量、可靠的移动端 Vue 组件库<br>vant的开发团队是 <code>有赞</code></p><h3 id="vant安装"><a href="#vant安装" class="headerlink" title="vant安装"></a>vant安装</h3><p><a href="https://youzan.github.io/vant/#/zh-CN/quickstart" target="_blank" rel="noopener" title="vant安装">vant安装</a></p><h3 id="vant引入的两种方式"><a href="#vant引入的两种方式" class="headerlink" title="vant引入的两种方式"></a>vant引入的两种方式</h3><ul><li>全局引入<pre class=" language-html"><code class="language-html"></code></pre></li></ul><script>import Vue from 'vue';import Vant from 'vant';import 'vant/lib/index.css';Vue.use(Vant);</script><pre><code>+ 按需引入首先安装babel插件&gt; 注意：配置 babel-plugin-import 插件后将不允许导入所有组件 ```html&lt;script&gt;npm i babel-plugin-import -D&lt;/script&gt;</code></pre><p>配置babel</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      libraryName<span class="token punctuation">:</span> <span class="token string">'vant'</span><span class="token punctuation">,</span>      libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>      style<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'vant'</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>用的时候直接引入需要的组件即可<br>如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>安装参考<br><a href="https://youzan.github.io/vant/#/zh-CN/quickstart" target="_blank" rel="noopener" title="安装参考">vant引入方式</a></p><h3 id="vant-rem适配"><a href="#vant-rem适配" class="headerlink" title="vant rem适配"></a>vant rem适配</h3><p>vant的px尺寸转rem参考以下网址<br><a href="https://www.cnblogs.com/lml2017/p/9953429.html" target="_blank" rel="noopener" title="vant的px尺寸转rem">vant的px尺寸转rem</a>;</p><h3 id="pop弹出层结合日期-弹窗实现ios风格的日期选择"><a href="#pop弹出层结合日期-弹窗实现ios风格的日期选择" class="headerlink" title="pop弹出层结合日期 弹窗实现ios风格的日期选择"></a>pop弹出层结合日期 弹窗实现ios风格的日期选择</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showPopup<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      弹出时间    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-popup</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-datetime-picker</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentDate<span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-popup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      currentDate<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>      show<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>      currentDate<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">showPopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><p>参考 这个网址  <a href="https://www.cnblogs.com/kerryw/p/9459621.html" target="_blank" rel="noopener">https://www.cnblogs.com/kerryw/p/9459621.html</a></p><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><p>vant的下拉刷新 使用前提首先样式得到位 </p><p><code>.van-pull-refresh__track</code>是选择的时候可下拉的区域 所以得设置他的高度</p><h3 id="vant-作业"><a href="#vant-作业" class="headerlink" title="vant 作业"></a>vant 作业</h3><p>vant 重构 前面做的购物车案例 </p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue ui框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios</title>
      <link href="/2019/03/23/axios/"/>
      <url>/2019/03/23/axios/</url>
      
        <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 类似jq的$.ajax<br>axios是一个已经封装好的ajax 的一个库</p><h2 id="axios特性"><a href="#axios特性" class="headerlink" title="axios特性"></a>axios特性</h2><ul><li>从浏览器中创建 <code>XMLHttpRequests</code></li><li>从 <code>node.js</code> 创建 <code>http</code> 请求</li><li>支持 <code>Promise</code> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <code>XSRF</code>(跨站请求伪造)</li></ul><h3 id="axios安装-vue-resource-尤雨溪-不再维护-推荐使用axios"><a href="#axios安装-vue-resource-尤雨溪-不再维护-推荐使用axios" class="headerlink" title="axios安装  vue-resource 尤雨溪 不再维护  推荐使用axios"></a>axios安装  vue-resource 尤雨溪 不再维护  推荐使用axios</h3><p>使用 npm:</p><pre class=" language-html"><code class="language-html">npm install axios --saveimport axios from "axios"</code></pre><p>使用 cdn:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="axios中文文档-非官方"><a href="#axios中文文档-非官方" class="headerlink" title="axios中文文档(非官方)"></a>axios中文文档(非官方)</h3><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a></p><h3 id="axios-官方文档地址-英文"><a href="#axios-官方文档地址-英文" class="headerlink" title="axios 官方文档地址(英文)"></a>axios 官方文档地址(英文)</h3><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p><h3 id="axios返回的数据"><a href="#axios返回的数据" class="headerlink" title="axios返回的数据"></a>axios返回的数据</h3><ul><li>config 请求的时候附带的配置参数</li><li>data 后端返回的数据</li><li>headers  请求头 里面包含发送给后端的格式 <code>application/json;charset=UTF-8</code></li><li>request  ajax请求</li><li>status  返回的状态码</li><li>statusText  返回的状态文字<h3 id="电影接口-豆瓣电影图片做防盗链处理-需要加上这个"><a href="#电影接口-豆瓣电影图片做防盗链处理-需要加上这个" class="headerlink" title="电影接口  豆瓣电影图片做防盗链处理 需要加上这个"></a>电影接口  豆瓣电影图片做防盗链处理 需要加上这个<meta name="referrer" content="never"></h3></li><li>服务器地址<br><a href="http://59.110.138.169" target="_blank" rel="noopener">http://59.110.138.169</a></li></ul><p><a href="http://114.55.243.6:8080" target="_blank" rel="noopener">http://114.55.243.6:8080</a></p><ul><li>豆瓣电影接口<br><a href="https://apizza.net/pro/#/project/219bd7da9f36824337b05a33e9e08c51/browse?pass=a511db3cf920386c952dd6bdfbcf42fd" target="_blank" rel="noopener">https://apizza.net/pro/#/project/219bd7da9f36824337b05a33e9e08c51/browse?pass=a511db3cf920386c952dd6bdfbcf42fd</a></li></ul><h3 id="常用get-post请求"><a href="#常用get-post请求" class="headerlink" title="常用get/post请求"></a>常用get/post请求</h3><p><a href=""http://www.bufanui.com/designInfo/detail/6fd1d4a4ccb44c878ae72273bd3dca08"" title="不凡电影接口"> 电影接口</a></p><ul><li>get请求 豆瓣电影接口<ul><li>get请求不带参数<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.bufantec.com/api/douban/movie/in_theaters'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><img src="./imgs/img1.jpg" alt="请求结果" title="请求结果"><ul><li>get请求附带参数<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://www.bufantec.com/api/douban/movie/in_theaters?start=1&amp;limit=10'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// get请求附带参数的另一种写法</span><span class="token comment" spellcheck="true">/* axios.get('http://www.bufantec.com/api/douban/movie/in_theaters',{  params:{    start:2,    limit:10  }}) */</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><img src="./imgs/img2.jpg" alt="请求结果" title="请求结果"></li></ul></li></ul></li><li>post请求带参数<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token punctuation">{</span>      Mob<span class="token punctuation">:</span><span class="token number">18311111111</span><span class="token punctuation">,</span>      validcode<span class="token punctuation">:</span><span class="token string">"815961"</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span><span class="token string">"regiVali"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://order.gjw.com/Order_Api/GetValiCode'</span><span class="token punctuation">,</span>datas <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><img src="./imgs/img3.jpg" alt="post请求" title="post请求"><h3 id="post请求注意事项"><a href="#post请求注意事项" class="headerlink" title="post请求注意事项"></a>post请求注意事项</h3></li></ul><p>axios 使用 post 发送数据时，默认是直接把传递的参数转换成 json 放到请求体中提交到后端的。也就是说，我们的 Content-Type 变成了 application/json;charset=utf-8 ,这是axios默认的请求头content-type类型。但是实际我们后端要求的 ‘Content-Type’: ‘application/x-www-form-urlencoded’ 为多见，这就与我们不符合。<br>在HTTP协议消息头中，使用Content-Type来表示请求和响应中的媒体类型信息。它用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析并展示html等等。<br><strong>post请求常见的数据格式（content-type）</strong></p><ol><li><p><code>Content-Type: application/json</code> ： 请求体中的数据会以json字符串的形式发送到后端(axios默认的) 会导致后端接收不到我们发送给后端的数据</p></li><li><p><code>Content-Type: application/x-www-form-urlencoded</code>：请求体中的数据会以普通表单形式（键值对）发送到后端</p></li></ol><p>解决方法</p><ul><li><p>URLSearchParams   // 不支持ie</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>param<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span>param<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/user'</span><span class="token punctuation">,</span>param <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>qs模块 qs模块在node中默认自带</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"qs"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// post</span>        <span class="token comment" spellcheck="true">// post请求如果附带参数 那么需要附带的参数用qs.stringify转一下</span>      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span><span class="token string">"张飞1"</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>          sex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>          tel<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>          address<span class="token punctuation">:</span><span class="token string">"不凡1"</span><span class="token punctuation">,</span>          school<span class="token punctuation">:</span><span class="token string">"不凡1"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>      axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://59.110.138.169/api/ajax/user/save"</span><span class="token punctuation">,</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="axios执行多个并发请求"><a href="#axios执行多个并发请求" class="headerlink" title="axios执行多个并发请求"></a>axios执行多个并发请求</h3></li></ul><p>一次执行多次ajax请求<br>promise.all<br>执行多个并发请求是通过<code>axios.all</code>完成<br><code>axios.all([function , function , ...])</code><br>请求完成之后 会以数组的形式返回全部的请求数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">;</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"qs"</span><span class="token punctuation">;</span><span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token punctuation">{</span>        Mob<span class="token punctuation">:</span><span class="token number">18311111111</span><span class="token punctuation">,</span>        validcode<span class="token punctuation">:</span><span class="token string">"815961"</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span><span class="token string">"regiVali"</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/user'</span><span class="token punctuation">,</span>params <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// val返回的是全部的请求</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h3><ul><li><code>axios.defaults.baseURL</code> 设置默认公共请求地址baseURL<br>当我们的项目里面有很多的接口时 设置默认baseURL对后期的维护很有必要<br>例如 开发环境访问的是开发时的数据库 生产环境访问的是线上数据库 开发和生产访问的不是一个地址<br>在请求的时候自动的在地址前面加上设置的baseUrl<br>(开发环境是本地开发时的环境 生产环境是打包之后的环境)<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">==</span> <span class="token string">"development"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3001'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><ul><li><p><code>axios.defaults.timeout = 2500</code>; 设置超时</p><p>当后端返回数据过慢时设置了超时就会自动断开请求</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><code>axios.defaults.headers.common[&#39;token&#39;] = token</code>;<br>token是登陆的时候返回的token 如果后端让在别的页面请求数据的是附带token<br>一般用户判断用户是否登陆是根据token 进行判断的  一般把这个token存在session里面<br>只要把toke写在请求头里面 后端就知道我们登陆<br><code>axios.defaults.headers.common[&#39;token&#39;] = localStorage[&quot;token&quot;]</code><br>登陆的时候保存sessionkey  然后在请求其他接口的时候带上这个sessionkey  sessionkey  代表用户的身份 当我们请求数据的时候带上这个sessionkey  那么后端就知道现在是谁在请求数据<br>还有些特殊的情况 登陆的时候后端会在本地设置cookie token 他会根据cookie里面的值token来判断用户是否登陆  </li></ul><p>axios.defaults.headers.common[‘sessionKey’] = 登陆时后端返回的sessionKey<br>如果你每次请求接口需要验证，就加这个，不需要验证那就不用加<br><img src="./imgs/session.jpg" alt="用户身份鉴权" title="用户身份鉴权"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// axios.defaults.baseURL = "https:bufantest.com";</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      key<span class="token punctuation">:</span><span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"sessionKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> key <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"sessionKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'user-session'</span><span class="token punctuation">]</span> <span class="token operator">=</span> key      <span class="token punctuation">}</span>      axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://114.55.243.6:8080/user/getInfo"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 登陆</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://114.55.243.6:8080/user/login"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      loginType<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>      mobile<span class="token punctuation">:</span><span class="token number">18311111111</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>      verifyCode<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"sessionKey"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sessionKey<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="axios拦截器-interceptors"><a href="#axios拦截器-interceptors" class="headerlink" title="axios拦截器 interceptors"></a>axios拦截器 interceptors</h3><p>页面发送http请求，很多情况我们要对请求和其响应进行特定的处理；如果请求数非常多，单独对每一个请求进行处理会变得非常麻烦，程序的优雅性也会大打折扣。好在强大的axios为开发者提供了这样一个API：拦截器。拦截器分为 请求（request）拦截器和 响应（response）拦截器。</p><blockquote><p>前端请求接口时首先向服务端发送请求的接口加参数 这个步骤称之为request<br>request 对象代表了一个HTTP请求，其具有一些属性来保存请求中的一些数据，比如params string，body，HTTP headers等等。</p></blockquote><ul><li>params get请求附带的参数</li><li>body post请求附带的参数</li><li>HTTP headers 提交数据类型</li></ul><blockquote><p>服务端接收到请求之后响应数据 这个步骤称之为response<br>response里面存放的就是服务端返回给我们的数据，包括状态码，返回的数据格式等等</p></blockquote><p>axios拦截器就是对这请求前和返回数据后的这两个过程执行操作</p><h3 id="axios拦截器-开始-类似路由守卫"><a href="#axios拦截器-开始-类似路由守卫" class="headerlink" title="axios拦截器 开始 类似路由守卫"></a>axios拦截器 开始 类似路由守卫</h3><ul><li>elementui安装<ul><li>安装elementui cnpm install element-ui –save</li><li>注册element<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';</code></pre></li></ul></li></ul><p>Vue.use(ElementUI);<br></script></p><pre><code>+ 请求拦截器  - config里面包含请求的参数 如请求地址 请求类似 请求参数等在请求的时候执行一些操作 比如开启loading弹窗 可以想象成router的导航守卫```html&lt;script&gt;axios.interceptors.request.use(function (config) {    // 在发起请求请做一些业务处理      // 如开启loading  对请求的参数做处理 添加token等    // 例  在请求的时候开启elementui的loading  loadings = Loading.service({ fullscreen: true });  if(config.method == &quot;post&quot;){      config.data = qs.stringify(config.data);  }  console.log(config)    return config;}, function (error) {    // 对请求失败做处理    return Promise.reject(error);});&lt;/script&gt;</code></pre><ul><li>响应拦截器<br>比如响应数据之后关闭loading弹窗 <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在请求之后做处理 如关闭loading</span>loadings<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对返回过来的数据进行过滤操作</span>  <span class="token keyword">return</span> config<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对请求失败做处理</span>  loadings<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="封装常用的get-post请求"><a href="#封装常用的get-post请求" class="headerlink" title="封装常用的get/post请求"></a>封装常用的get/post请求</h3><blockquote><p>前言<br>get请求和post请求传参的写法</p></blockquote><ul><li>get请求传参<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>          ID<span class="token punctuation">:</span> <span class="token number">12345</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><pre><code>+ post请求传参的方式```html&lt;script&gt;    axios.post(&#39;/user&#39;, {        ID: 12345    })&lt;/script&gt;</code></pre><p>在src目录新建文件夹api<br>在api文件夹新建index.js</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Loading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"qs"</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// api的base_url</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment" spellcheck="true">// request timeout</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> loadings<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// request interceptor</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//   var token = sessionStorage.getItem("token")</span><span class="token comment" spellcheck="true">//   if (token) {</span><span class="token comment" spellcheck="true">//     // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改</span><span class="token comment" spellcheck="true">//     config.headers['X-Token'] = token</span><span class="token comment" spellcheck="true">//   }</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// config.headers['Content-Type'] = 'application/x-www-form-urlencoded';</span>    config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  loadings <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fullscreen<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// respone interceptor</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    loadings<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 下面的注释为通过在response里，自定义code来标示请求状态   * 当code返回如下情况则说明权限有问题，登出并返回到登录页   * 如想通过xmlhttprequest来状态码标识 逻辑可写在下面error中   * 以下代码均为样例，请结合自生需求加以修改，若不需要，则可删除   */</span>  <span class="token comment" spellcheck="true">// response => {</span>  <span class="token comment" spellcheck="true">//   const res = response.data</span>  <span class="token comment" spellcheck="true">//   if (res.code !== 20000) {</span>  <span class="token comment" spellcheck="true">//     Message({</span>  <span class="token comment" spellcheck="true">//       message: res.message,</span>  <span class="token comment" spellcheck="true">//       type: 'error',</span>  <span class="token comment" spellcheck="true">//       duration: 5 * 1000</span>  <span class="token comment" spellcheck="true">//     })</span>  <span class="token comment" spellcheck="true">//     // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;</span>  <span class="token comment" spellcheck="true">//     if (res.code === 50008 || res.code === 50012 || res.code === 50014) {</span>  <span class="token comment" spellcheck="true">//       // 请自行在引入 MessageBox</span>  <span class="token comment" spellcheck="true">//       // import { Message, MessageBox } from 'element-ui'</span>  <span class="token comment" spellcheck="true">//       MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {</span>  <span class="token comment" spellcheck="true">//         confirmButtonText: '重新登录',</span>  <span class="token comment" spellcheck="true">//         cancelButtonText: '取消',</span>  <span class="token comment" spellcheck="true">//         type: 'warning'</span>  <span class="token comment" spellcheck="true">//       }).then(() => {</span>  <span class="token comment" spellcheck="true">//           location.reload() // 为了重新实例化vue-router对象 避免bug</span>  <span class="token comment" spellcheck="true">//       })</span>  <span class="token comment" spellcheck="true">//     }</span>  <span class="token comment" spellcheck="true">//     return Promise.reject('error')</span>  <span class="token comment" spellcheck="true">//   } else {</span>  <span class="token comment" spellcheck="true">//     return response.data</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">// },</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for debug</span>    loadings<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>调用的时候先引入<code>api/index.js</code><br>也可以把它挂载到vue原型上</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">"@/api"</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$ajax <span class="token operator">=</span> api<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>调用的时候执行</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$ajax<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span>datas  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2019/02/28/webpack/"/>
      <url>/2019/02/28/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>import 默认只能导入js文件 不能导入图片 css等 但vue-cli的项目可以导入 其中 做的处理就是webpack 通过webpack 可以打包图片等</p><h2 id="传统开发的缺点"><a href="#传统开发的缺点" class="headerlink" title="传统开发的缺点"></a>传统开发的缺点</h2><p><a href="https://www.webpackjs.com/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85" target="_blank" rel="noopener" title="传统开发的缺点">传统开发的缺点</a></p><ul><li>js脚本的执行依赖于外部扩展库(假设js代码里面有jq的代码 那么页面必须事先引入jq)</li><li>js依赖顺序问题 </li><li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码</li></ul><h2 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h2><p>webpack可以很好的解决上面的问题<br><a href=""https://www.webpackjs.com/"" title="webpack官网">webpack官网</a><br>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。<br>我们熟悉的<code>vue-cli</code>内置了<code>webpack</code>,可以把单文件组件打包成<code>html</code><br><img src="./imgs/img1.jpg" alt="webpack图解"></p><h3 id="webpack-作用"><a href="#webpack-作用" class="headerlink" title="webpack 作用"></a>webpack 作用</h3><p>把es6 的import 代码转换成浏览器能识别的代码  wenpack所能转换的es6代码 仅限于 import 和 export </p><h2 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h2><p>本地安装  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev webpacknpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev webpack<span class="token operator">-</span>cli</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="初始化本地项目"><a href="#初始化本地项目" class="headerlink" title="初始化本地项目"></a>初始化本地项目</h2><p>webpack的配置文件是 <code>webpack.config.js</code><br>新建项目 项目结构如下 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> webpack<span class="token operator">-</span>demo  <span class="token operator">|</span><span class="token operator">-</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json  <span class="token operator">|</span><span class="token operator">-</span> webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js  <span class="token operator">|</span><span class="token operator">-</span> <span class="token operator">/</span>dist    <span class="token operator">|</span><span class="token operator">-</span> index<span class="token punctuation">.</span>html  <span class="token operator">|</span><span class="token operator">-</span> <span class="token operator">/</span>src    <span class="token operator">|</span><span class="token operator">-</span> index<span class="token punctuation">.</span>js</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="require-import-export-关系"><a href="#require-import-export-关系" class="headerlink" title="require import/export 关系"></a>require import/export 关系</h2><blockquote><p>两者相同点</p></blockquote><ol><li>require import/export都是模块化的写法 </li><li>import/export 在浏览器里面是不支持这种语法的 require 在浏览器里面也不支持 <blockquote><p>不同点 </p></blockquote></li><li>import/export 是es6的模块化写法</li><li>require 是commonjs的模块化写法(commonjs是es6 import没出现之前使用的规范 这个规范是js爱好者搞出来的的 不是官方弄出来的 慢慢这个规范被js官方发现了 js官方就搞出了import/export 最早js是没有模块化的 )</li><li>require在nodejs里面是支持的   import/export在node里面不识别</li><li>我们写的vue-cli的项目是运行在node的  但为什么能识别呢  这是因为vue-cli是基于webpack的 webpack会把import/export降级成require 这个时候node就可以识别import/export</li></ol><h2 id="webpack四个核心"><a href="#webpack四个核心" class="headerlink" title="webpack四个核心"></a>webpack四个核心</h2><ul><li>入口(entry)</li><li>输出(output)</li><li>loader webpack 默认也只能打包js文件 通过loader可以实现打包图片 css  js …  </li><li>插件(plugins)  辅助webpack用的 </li></ul><h3 id="entry-入口"><a href="#entry-入口" class="headerlink" title="entry 入口"></a>entry 入口</h3><p>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。<br>每个依赖项随即被处理，最后输出到称之为 bundles 的文件中。<br>webpack通过这个entry入口来查找入口文件  入口文件比如 <code>vue</code>中的<code>main.js</code> 里面包含了很多的组件或依赖</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 在webpack.config.js</span>    <span class="token comment" spellcheck="true">// module.exports是commonjs的规范  </span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 在webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'main.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。包括.css   less  sass   jpg  png 等。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'my-first-webpack.bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件 plugins"></a>插件 plugins</h3><p><code>plugins</code> 被用于转换某些类型的模块,插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过 npm 安装</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于访问内置插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a>管理输出</h3><p>每次修改出口文件 都需要手动修改index.html里面的js文件 这种方式很麻烦 webpack提供了一种解决方法<br><code>HtmlWebpackPlugin</code> <a href="https://www.webpackjs.com/guides/output-management/#%E8%AE%BE%E5%AE%9A-htmlwebpackplugin" target="_blank" rel="noopener" title="HtmlWebpackPlugin">HtmlWebpackPlugin</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    print<span class="token punctuation">:</span> <span class="token string">'./src/print.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分别生成app.bundle.js 和 print.bundle.js</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h3><p>用于追溯错误代码位置  在webpack.config.js里面加<br><code>devtool: &#39;inline-source-map&#39;,</code></p><h3 id="热加载-webpack-dev-server"><a href="#热加载-webpack-dev-server" class="headerlink" title="热加载  webpack-dev-server"></a>热加载  webpack-dev-server</h3><p>每次更改文件都必须从新打包一次，很麻烦<br>启用热加载能够帮助我们监听代码的变化自动进行打包代码</p><h3 id="热模块替换（HMR"><a href="#热模块替换（HMR" class="headerlink" title="热模块替换（HMR)"></a>热模块替换（HMR)</h3><p>官方文档有问题  </p><h3 id="tree-shaking-中文官网是错误的"><a href="#tree-shaking-中文官网是错误的" class="headerlink" title="tree shaking  中文官网是错误的"></a>tree shaking  中文官网是错误的</h3><p>tree shaking 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码<br>webpack在打包的时候默认删除文件中未使用的部分。<br>如 在index.js的同级新建math.js 里面有两个函数<br>如果只引入cube  那么在打包的时候square是不会被打包进来的  如果需要square被导入 需要在webpack.config.js里面加入<br><code>mode: &#39;development&#39;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="生产环境构建"><a href="#生产环境构建" class="headerlink" title="生产环境构建"></a>生产环境构建</h3><p>开发环境(<code>development</code>)和生产环境(<code>production</code>)的构建目标差异很大。在开发环境中，我们需要具有强大的、具有<code>实时重新加载(live reloading)</code>或<code>热模块替换(hot module replacement)</code>能力的 <code>source map</code> 和 <code>localhost server</code>。而在生产环境中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写彼此独立的 webpack 配置。</p><ul><li>webpack.common.js 公用的配置文件</li><li>webpack.dev.js 开发时的配置文件 </li><li>webpack.prod.js 生产时的配置文件 </li></ul><h3 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h3><ul><li>公共模块分离<br>比如a.js里面引入lodash b.js里面也引入lodash 那么在打包的时候打包生成的每个文件都包含lodash 既然lodash相同 那么可以用一种方法把lodash分离<pre class=" language-html"><code class="language-html"></code></pre></li></ul><script> const path = require('path'); const { CleanWebpackPlugin } = require('clean-webpack-plugin'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = {   entry: {    index: './src/index.js',    another: './src/another-module.js'   },   plugins: [     // new CleanWebpackPlugin(['dist/*']) for < v2 versions of CleanWebpackPlugin     new CleanWebpackPlugin(),     new HtmlWebpackPlugin({       title: 'Production'     })   ],   optimization: {  // 公共代码抽离         splitChunks: {           chunks: 'all'         }       },   output: {     filename: '[name].bundle.js',     path: path.resolve(__dirname, 'dist')   } };</script><pre><code>### 缓存 使用 `webpack` 来打包我们的模块化后的应用程序，`webpack` 会生成一个可部署的 `/dist` 目录，然后把打包后的内容放置在此目录中。只要 `/dist` 目录中的内容部署到服务器上，客户端（通常是浏览器）就能够访问网站此服务器的网站及其资源。而最后一步获取资源是比较耗费时间的，这就是为什么浏览器使用一种名为 `缓存` 的技术。可以通过命中缓存，以降低网络流量，使网站加载速度更快，然而，如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。webpack解决缓存`filename: &#39;[name].[contenthash].js&#39;`&gt; runtime runtime 指的是 webpack 的运行环境(具体作用就是模块解析, 加载) 和 模块信息清单 解决方法 `runtimeChunk: &#39;single&#39;`&gt; 缓存基本不变的依赖 将第三方库（例如lodash或）提取到单独的vendor块中也是一种很好的做法，因为它们比我们的本地源代码更不可能更改。后端缓存这些基本不变的依赖对用户的体验很好```html&lt;script&gt; optimization: {    runtimeChunk: &#39;single&#39;,    splitChunks: {      cacheGroups: {        vendor: {          test: /[\\/]node_modules[\\/]/,          name: &#39;vendors&#39;,          chunks: &#39;all&#39;        }      }    }       },&lt;/script&gt;</code></pre><h3 id="分离模块的好处"><a href="#分离模块的好处" class="headerlink" title="分离模块的好处"></a>分离模块的好处</h3><p>依赖的模块和webpack运行所依赖的环境分离开来<br>可以让后端对这俩文件进行缓存 也就是说这俩文件缓存之后 日后用户如果第二次及以后进入项目的时候 下载这俩文件将会从缓存里面读取(那么文件的加载速度将会更快 用户体验回更好 打开网页秒开)</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex高级</title>
      <link href="/2018/11/19/vuex-gao-ji/"/>
      <url>/2018/11/19/vuex-gao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex辅助函数-帮助我们节省代码的语法糖"><a href="#vuex辅助函数-帮助我们节省代码的语法糖" class="headerlink" title="vuex辅助函数 帮助我们节省代码的语法糖"></a>vuex辅助函数 帮助我们节省代码的语法糖</h2><ol><li>mapState  –  当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键。(其实就是我们在vuex里面定义的变量  接收的时候还要再定义变量去接收 很麻烦 vuex辅助函数呢 可以帮我们解决这种麻烦)</li><li>mapGetters – 将store中的多个getter映射到局部组件的计算属性中</li><li>mapMutations 将组件中的 methods 映射为 store.commit 调用。</li><li>mapActions 将组件的 methods 映射为 store.dispatch 调用</li></ol><h3 id="mapState-的三种种写法"><a href="#mapState-的三种种写法" class="headerlink" title="mapState 的三种种写法"></a>mapState 的三种种写法</h3><pre><code>export default {  name: &#39;home&#39;,  components: {    HelloWorld  },  data () {    return {      username:&quot;用户名&quot;    }  },  computed: {    ...mapState({      age:state =&gt; state.age,  // 第一种  箭头函数       num:&quot;num&quot;,  // 传字符串参数 &#39;num&#39; 等同于 `state =&gt; state.num`      name (state) {  // 第三种呢 等同于第一种  只不过第三种可以使用this 方便vuex里面的数据结合本地的数据        return this.username + state.name ;      }    })  }}</code></pre><h3 id="mapGetters-getters的辅助函数"><a href="#mapGetters-getters的辅助函数" class="headerlink" title="mapGetters  getters的辅助函数"></a>mapGetters  getters的辅助函数</h3><pre><code>import HelloWorld from &#39;@/components/HelloWorld.vue&#39;import { mapState , mapGetters , mapMutations , mapActions } from &quot;vuex&quot;export default {  name: &#39;home&#39;,  components: {    HelloWorld  },  data () {    return {      username:&quot;用户名&quot;    }  },  computed: {    ...mapState({      num:&quot;num&quot;,      age:state =&gt; state.age,      name (state) {        return this.username + state.name ;      }    }),    ...mapGetters({      price:&quot;price&quot;    })  }}</code></pre><h3 id="mapMutations-mutations的辅助函数的两种写法"><a href="#mapMutations-mutations的辅助函数的两种写法" class="headerlink" title="mapMutations mutations的辅助函数的两种写法"></a>mapMutations mutations的辅助函数的两种写法</h3><pre><code>methods: {    ...mapMutations([     // 第一种      &quot;add&quot;,  // 调用的时候执行this.add()  映射为 `this.$store.commit(&#39;add&#39;)`      &quot;adds&quot;  // 如果需要提交载荷  直接调用 this.adds(num ) 映射为 `this.$store.commit(&#39;adds&#39;, num)`    ]),    ...mapMutations({      add: &#39;add&#39; // 将 `this.add()` 映射为 `this.$store.commit(&#39;add&#39;)`     })  }</code></pre><h3 id="mapActions-actions的辅助函数"><a href="#mapActions-actions的辅助函数" class="headerlink" title="mapActions  actions的辅助函数"></a>mapActions  actions的辅助函数</h3><pre><code> methods: {    ...mapActions([      &#39;increment&#39;, // 将 `this.increment()` 映射为 `this.$store.dispatch(&#39;increment&#39;)`      // `mapActions` 也支持载荷：      &#39;incrementBy&#39; // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#39;incrementBy&#39;, amount)`    ]),    ...mapActions({      add: &#39;increment&#39; // 将 `this.add()` 映射为 `this.$store.dispatch(&#39;increment&#39;)`    })  }</code></pre><h2 id="Module-vuex模块化"><a href="#Module-vuex模块化" class="headerlink" title="Module  vuex模块化"></a>Module  vuex模块化</h2><h3 id="vuex官方解释-由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store-对象就有可能变得相当臃肿。为了解决以上问题，Vuex-允许我们将-store-分割成模块（module）。每个模块拥有自己的-state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割："><a href="#vuex官方解释-由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store-对象就有可能变得相当臃肿。为了解决以上问题，Vuex-允许我们将-store-分割成模块（module）。每个模块拥有自己的-state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：" class="headerlink" title="vuex官方解释 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割："></a>vuex官方解释 由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</h3><h3 id="通俗点的说法就是-当我们写大型的项目的时候-我们所有的需要共享的信息或状态都写在同一个state里面-导致state或其他的操作比较臃肿-那么-为了解决这个问题-vuex提出了模块化-module"><a href="#通俗点的说法就是-当我们写大型的项目的时候-我们所有的需要共享的信息或状态都写在同一个state里面-导致state或其他的操作比较臃肿-那么-为了解决这个问题-vuex提出了模块化-module" class="headerlink" title="通俗点的说法就是 当我们写大型的项目的时候  我们所有的需要共享的信息或状态都写在同一个state里面  导致state或其他的操作比较臃肿 那么 为了解决这个问题 vuex提出了模块化  module"></a>通俗点的说法就是 当我们写大型的项目的时候  我们所有的需要共享的信息或状态都写在同一个state里面  导致state或其他的操作比较臃肿 那么 为了解决这个问题 vuex提出了模块化  module</h3><p>下面呢 是我们模块化的写法 在main.js的同级新建一个store文件夹 在这个store文件夹新建一个index.js 里面写上一下内容 </p><pre><code>import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;Vue.use(Vuex)import moduleA from &quot;./modules/moduleA&quot;import moduleB from &quot;./modules/moduleB&quot;export default new Vuex.Store({  modules: {    a: moduleA,       b: moduleB  }})</code></pre><p>在index.js的同级新建一个modules的文件夹 这个文件夹分别有两个js 分别为 moduleA 和 moduleB 内容分别为以下内容 再在main.js里面引入index.js 这个模块化的写法就已经完成 </p><pre><code>const moduleA = {   // moduleA    state: { num:1 },    mutations: {          addNum(state){            state.num += 2  // 调用的时候执行 this.$store.commit(&#39;addNum&#39;)        }    },    actions: {         syncAddNum(context,val){            context.commit(&quot;addNum&quot;,val) // 调用的时候执行 this.$store.dispatch(&#39;syncAddNum&#39;)        }    },    getters: {         addNums(state){            return state.num + &quot;元 &quot;  // 调用的时候执行 this.$store.getters.addNums        }    }}export default moduleAconst moduleB = {    state: { num:2 },    mutations: {         addNum(state){            state.num += 3        }     },    actions: {  },  }export default moduleB</code></pre><h3 id="模块化注意点"><a href="#模块化注意点" class="headerlink" title="模块化注意点"></a>模块化注意点</h3><ol><li>对于上面的模块化的写法  只有state是模块化的 其他的诸如 getters mutations actions不是模块化 </li><li>如果想实现getters mutations actions实现模块化 那么 得在每个模块的js里面加入 <strong>*命名空间 *</strong><br><code>namespaced: true,</code> </li><li>启用命名空间之后 获取getters mutations actions的写法都要变 </li></ol><pre><code>const moduleA = {   // moduleA    namespaced: true,    state: { num:1 },    mutations: {          addNum(state){            state.num += 2  // 调用的时候执行 this.$store.commit(&#39;a/addNum&#39;,3)        }    },    actions: {         syncAddNum(context,val){            context.commit(&quot;addNum&quot;,val)  // 调用的时候执行 this.$store.dispatch(&#39;a/syncAddNum&#39;,3)        }    },    getters: {         addNums(state){            return state.num + &quot;元 &quot;  // 调用的时候执行 this.$store.getters[&#39;a/addNum2&#39;]        }    }}export default moduleAconst moduleB = {    namespaced: true,    state: { num:2 },    mutations: {         addNum(state){            state.num += 3        }     },    actions: {  },  }export default moduleB</code></pre><ol start="4"><li>启用命名空间后辅助函数 mapState mapGetters mapMutations mapActions 的写法</li></ol><ul><li>启用命名空间后的mapState的写法 <pre><code>...mapState({ a1: state =&gt; state.b.num,  }),</code></pre></li><li>启用命名空间后的mapGetters的写法 <pre><code>...mapGetters({ a2: &quot;b/addNum1&quot;}),</code></pre></li><li>启用命名空间后的mapMutations的写法 <pre><code>...mapMutations({event : &quot;b/addNum&quot;})  // this.event(3) 附带参数的写法 </code></pre></li><li>启用命名空间后的mapActions的写法 <pre><code>...mapActions({events : &quot;b/syncAddNum&quot;}),  // this.events(4) 附带参数的写法 </code></pre></li></ul><h3 id="监听路由变化执行动画效果"><a href="#监听路由变化执行动画效果" class="headerlink" title="监听路由变化执行动画效果"></a>监听路由变化执行动画效果</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"$route"</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> toPath  <span class="token operator">=</span> to<span class="token punctuation">.</span>fullPath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">var</span> fromPath  <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>fullPath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"toPath"</span><span class="token punctuation">,</span>toPath<span class="token punctuation">,</span><span class="token string">"fromPath"</span><span class="token punctuation">,</span>fromPath<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>toPath<span class="token operator">></span>fromPath<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 进入某个内页</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classname <span class="token operator">=</span> <span class="token string">"fadeInRight animated"</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>toPath<span class="token operator">&lt;</span>fromPath<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 离开内页</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classname <span class="token operator">=</span> <span class="token string">"fadeInLeft animated"</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classname <span class="token operator">=</span> <span class="token string">"fadeIn animated"</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// if(to.name == "info"){</span>      <span class="token comment" spellcheck="true">//   this.classname = "fadeInRight  animated"</span>      <span class="token comment" spellcheck="true">// }else{</span>      <span class="token comment" spellcheck="true">//   this.classname = "fadeInLeft  animated"</span>      <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex</title>
      <link href="/2018/10/11/vuex/"/>
      <url>/2018/10/11/vuex/</url>
      
        <content type="html"><![CDATA[<h2 id="vue进阶"><a href="#vue进阶" class="headerlink" title="vue进阶"></a>vue进阶</h2><h3 id="vuex初始"><a href="#vuex初始" class="headerlink" title="vuex初始"></a>vuex初始</h3><blockquote><p>vuex定义  vuex是一个状态管理的插件，可以解决不同组件之间的数据共享和数据持久化。通俗点的说法就是全局的数据仓库，在组件里面的data是组件里的数据仓库也就是局部的数据仓库，全局数据仓库里面的数据可以在任意组件中共享。<br>vuex是一个专门为vue.js设计的集中式状态管理架构。状态？我把它理解为在data中的属性需要共享给其他vue组件使用的部分，就叫做状态。简单的说就是data中需要共用的属性。</p></blockquote><h2 id="Vuex-的基本结构"><a href="#Vuex-的基本结构" class="headerlink" title="Vuex 的基本结构"></a>Vuex 的基本结构</h2><p>Vuex 是一个个专为 vue.js 应用程序开发的状态管理模式。它采用集中式存储来管理应用<br>所有组件的状态，并以相应的规则来保证状态以一种可预测的方式发生变化。 Vuex 集成<br>到了 Vue 官方调试工具 devtools extension </p><blockquote><p>安装vue devtools </p></blockquote><ol><li>直接谷歌商店安装</li><li><pre><code>git clone git@github.com:vuejs/vue-devtools.git</code></pre></li></ol><pre><code>[参考](https://segmentfault.com/a/1190000009682735 &quot;参考网址&quot;)### 安装vuex1. `cnpm install vuex --save `2. 在main.js的同级目录新建store文件夹 里面新建一个index.js 3. 在index.js 里面引入 vuex</code></pre><p>import Vue from ‘vue’<br>import Vuex from ‘vuex’<br>Vue.use(Vuex)</p><pre><code>4. 向外暴露vuex实例 </code></pre><p>export default new Vuex.Store({<br>  state:{},<br>  mutations:{},<br>  getters:{},<br>  actions:{},<br>  modules:{},<br>})</p><pre><code>+ state 一－ vuex store 实例的根状态对象，用于定义共享的状态变量，就像 Vue 实例中data+ mutations 一 可以理解为 store的methods(同步操作 )+ getters 一 读取器，外部程序通过它获取变量的具体值，或者在取值前做一些计算（可以认为是 store 的计算属性）+ actions  以理解为 store的methods(异步操作 如ajax)+ modules 以模块化的方式写vuex (如购物车对应一个module 个人中心对应一个module )5. 挂载倒vue实例类上</code></pre><p>import store from ‘./store/store’</p><p>new Vue({<br>  router,<br>  store,<br>  render: h =&gt; h(App)<br>}).$mount(‘#app’)</p><pre><code>## 开始  ###  获取state里面的值1. 在state里面放入数据</code></pre><p>export default new Vuex.Store({<br>  state: {<br>    num:1<br>  },<br>  mutations: {</p><p>  },<br>  actions: {</p><p>  }<br>})</p><pre><code>2. 在某个组件获取这个数据 用computed来接收这个数据</code></pre><p>computed: {<br>list(){<br>    return this.$store.state.num<br>}<br>}</p><pre><code>### 更改state里面的值 mutations(同步提交) 更改state里面的值 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数 &quot;同步模式&quot;就是上一段的模式，后一个任务等待前一个任务结束，然后再执行。在mutation里面写入更改的函数 函数的第一个参数代表 state 更改vuex中的state是通过更改这个参数实现的 [Mutation 必须是同步函数](https://vuex.vuejs.org/zh/guide/mutations.html#mutation-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%90%8C%E6%AD%A5%E5%87%BD%E6%95%B0 &quot;Mutation 必须是同步函数&quot;)为什么必须是同步函数呢 因为在devtools日志里面监测不到数据的变化</code></pre><p>export default new Vuex.Store({<br>  state: {<br>    num:1<br>  },<br>  mutations: {<br>    updateNum(state){<br>      state.num ++   // this.$store.commit(“updateNum”)<br>    }<br>  },<br>  actions: {</p><p>  }<br>})</p><pre><code>&gt; 提交载荷（Payload） 其实就是提交的时候附带参数 只能提交一个载荷</code></pre><p>export default new Vuex.Store({<br>  state: {<br>    num:1<br>  },<br>  mutations: {<br>    updateNum(state,val){<br>      state.num += val;  // this.$store.commit(“updateNum”,2)<br>    }<br>  },<br>  actions: {</p><p>  }<br>})</p><pre><code>提交多个载荷 vuex不支持提交多个载荷 提交多个载荷需换种写法</code></pre><p>export default new Vuex.Store({<br>  state: {<br>    num:1<br>  },<br>  mutations: {<br>    updateNum(state,val){<br>      state.num += val.val;  // this.$store.commit(“updateNum”,{val:1,val1:2})<br>    }<br>  },<br>  actions: {</p><p>  }<br>})</p><pre><code>### action(异步更改state)Action 类似于 mutation，不同在于：+ Action 提交的是 mutation，而不是直接变更状态。  // action 里面提交数据是提交mutation 在mutation里面是直接修改state+ Action 可以包含任意异步操作。</code></pre><p>export default new Vuex.Store({<br>  state: {<br>    num:1<br>  },<br>  mutations: {<br>    updateNum(state,val){<br>        state.num += val; </p><pre><code>}</code></pre><p>  },<br>  actions: {<br>    syncUpdate(context ,val){<br>      setTimeout(function(){<br>        context.commit(“updateNum”,val)  // this.$store.dispatch(‘syncUpdate’,5) 分发 Action<br>      },400)</p><pre><code>},syncUpdate({commit} ,val){  // 解构写法  console.log(context)  setTimeout(function(){    commit(&quot;updateNum&quot;,val)    },400)},</code></pre><p>  }<br>})</p><pre><code>### getters (相当于计算属性)</code></pre><p>export default new Vuex.Store({<br>  state: {<br>    num:1<br>  },<br>  getters:{<br>    nums(state){<br>      return state.num + “元”  // this.$store.getters.nums<br>    }<br>  },<br>  mutations: {<br>    updateNum(state,val){<br>        state.num += val; </p><pre><code>}</code></pre><p>  },<br>  actions: {<br>    syncUpdate(context ,val){<br>      console.log(context)<br>      setTimeout(function(){<br>        context.commit(“updateNum”,val)<br>      },400)</p><pre><code>},syncUpdate({commit} ,val){  console.log(context)  setTimeout(function(){    commit(&quot;updateNum&quot;,val)    },400)},</code></pre><p>  }<br>})</p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义指令</title>
      <link href="/2018/08/22/vue-zi-ding-yi-zhi-ling/"/>
      <url>/2018/08/22/vue-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>常见的指令如 v-text v-model都是vue封装好的语法糖<br>我们也可以封装自己的指令(用于对dom执行某些操作)<br>封装自己的指令是通过directives来执行的<br>指令的主要作用就是可以操作dom</p><h3 id="常用指令钩子函数"><a href="#常用指令钩子函数" class="headerlink" title="常用指令钩子函数"></a>常用指令钩子函数</h3><ul><li>bind：<br>只调用一次，指令第一次绑定到元素时调用(这个时候还没插入dom)。在这里可以进行一次性的初始化设置。(不可以执行input的focus 因为指令绑定到元素 但元素还没插入到dom)</li><li>inserted：<br>当指令绑定的元素插入到dom时执行的钩子函数</li></ul><h3 id="常用指令钩子参数"><a href="#常用指令钩子参数" class="headerlink" title="常用指令钩子参数"></a>常用指令钩子参数</h3><ul><li>el<br>指代的是绑定自定义指令的那个元素  </li><li>binding<br>当前自定义指令对象 <ul><li>name<br>指令名，不包括 v- 前缀</li><li>value<br>指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2</li><li>expression<br>字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li></ul></li></ul><h3 id="指令简写"><a href="#指令简写" class="headerlink" title="指令简写"></a>指令简写</h3><p>在很多时候，在 bind 和 update 时触发相同行为，而不关心其它的钩子,可以把指令简写 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color-swatch'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05-vue/lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-aaa</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow <span class="token punctuation">=</span> !isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          取反        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> that <span class="token punctuation">;</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            info<span class="token punctuation">:</span><span class="token number">111</span><span class="token punctuation">,</span>            isShow<span class="token punctuation">:</span><span class="token boolean">false</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是混入的对象!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">aaa</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>               that<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// setTimeout(()=>{</span>              <span class="token comment" spellcheck="true">//   el.focus()</span>              <span class="token comment" spellcheck="true">// })</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="指令案例"><a href="#指令案例" class="headerlink" title="指令案例"></a>指令案例</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05-vue/lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-aa</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>blue<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          111        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> objs <span class="token operator">=</span> <span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            info<span class="token punctuation">:</span><span class="token number">111</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是混入的对象!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"aa"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 指令绑定到元素上的</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>oldVnode<span class="token punctuation">)</span>              el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span>binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 指令插入到dom上执行</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>oldVnode<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//var vm = new Vue(objs);</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>objs<span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>   Vue 实现了一套内容分发的 API，将 <slot> 元素作为承载分发内容的出口。<br>   插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到模板template指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。<br>   插槽显不显示、怎样显示是由父组件来控制的，而插槽在哪里显示就由子组件来进行控制。</p><p>   没有插槽的情况下在组件标签内些一些内容是不起任何作用的，当我在组件中声明了slot元素后，在组件元素内写的内容就会跑到它这里了！</p><h2 id="插槽详解"><a href="#插槽详解" class="headerlink" title="插槽详解"></a>插槽详解</h2><p><code>插槽是父组件与子组件新的通讯的方式，可以将父组件里面的内容显示到子组件中(包括标签)</code></p><h3 id="默认插槽-slot"><a href="#默认插槽-slot" class="headerlink" title="默认插槽 slot"></a>默认插槽 slot</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                插入组件的标签            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            456        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"com"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>                    template<span class="token punctuation">:</span><span class="token string">"&lt;h2>子组件&lt;slot>&lt;/slot>&lt;/h2>"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{ red }}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                isActive <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                red<span class="token punctuation">:</span><span class="token string">"red"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          com1 <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                info<span class="token punctuation">:</span><span class="token string">"子组件内容"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token string">"&lt;h2>我是子组件{{ info }} {{ red }}&lt;/h2>"</span>    <span class="token comment" spellcheck="true">// Property or method "red" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property.</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h3><p>在组件中没有写入内容的时候默认展示的内容  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{ red }}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                isActive <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                red<span class="token punctuation">:</span><span class="token string">"red"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          com1 <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                info<span class="token punctuation">:</span><span class="token string">"子组件内容"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token string">"&lt;h2>我是子组件{{ info }}&lt;slot>我是插槽的默认内容&lt;/slot>&lt;/h2>"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p> 用于标记往哪个具名插槽中插入子组件内容。<br> 简单理解就是 给每一个 slot 一个name属性，<br>    父组件中 使用子组件标签时用的v-slot:name<br>    要跟子组件的name匹配上，才会渲染出来<br>  需要template</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>main</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>底部内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    info<span class="token punctuation">:</span><span class="token number">1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"com"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>                    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                    &lt;div class="container">                        &lt;header>                            &lt;slot name="header">&lt;/slot>                        &lt;/header>                        &lt;main>                            &lt;slot name="main">&lt;/slot>                        &lt;/main>                        &lt;footer>                            &lt;slot name="footer">&lt;/slot>                        &lt;/footer>                    &lt;/div>                    `</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="作用域插槽-用作访问我们组件里面的属性"><a href="#作用域插槽-用作访问我们组件里面的属性" class="headerlink" title="作用域插槽  用作访问我们组件里面的属性"></a>作用域插槽  用作访问我们组件里面的属性</h3><p>可以理解为子组件传递数据到父组件<br>template内可以通过临时变量props来访问来自子组件插槽的数据msg</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                {{ slotProps.names }} {{ slotProps.age }}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el <span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">:</span><span class="token punctuation">[</span>                        <span class="token punctuation">{</span>                            name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>                            age <span class="token punctuation">:</span> <span class="token number">40</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>                            name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>                            age <span class="token punctuation">:</span> <span class="token number">40</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                com <span class="token punctuation">:</span> <span class="token punctuation">{</span>                    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">{</span>                            names<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>                            age<span class="token punctuation">:</span><span class="token number">40</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                        &lt;h2>子组件内容&lt;slot :names="names" :age="age">&lt;/slot>&lt;/h2>                    `</span></span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>动态组件  让多个组件使用同一个挂载点(component)，并动态切换，这就是动态组件。<br>动态组件缓存</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05-vue/lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.on</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentComponents <span class="token punctuation">=</span> item.components<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ item.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentComponents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                isActive <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                red<span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span>                currentComponents<span class="token punctuation">:</span><span class="token string">"com1"</span><span class="token punctuation">,</span>                list<span class="token punctuation">:</span><span class="token punctuation">[</span>                  <span class="token punctuation">{</span>                    name <span class="token punctuation">:</span> <span class="token string">"组件1"</span><span class="token punctuation">,</span>                    components<span class="token punctuation">:</span><span class="token string">"com1"</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    name <span class="token punctuation">:</span> <span class="token string">"组件2"</span><span class="token punctuation">,</span>                    components<span class="token punctuation">:</span><span class="token string">"com2"</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span>                    name <span class="token punctuation">:</span> <span class="token string">"组件3"</span><span class="token punctuation">,</span>                    components<span class="token punctuation">:</span><span class="token string">"com3"</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          com1 <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                info<span class="token punctuation">:</span><span class="token string">"组件1"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token string">"&lt;p>{{ info }}&lt;/p>"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          com2 <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                info<span class="token punctuation">:</span><span class="token string">"组件2"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token string">"&lt;p>{{ info }}&lt;/p>"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          com3 <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">{</span>                info<span class="token punctuation">:</span><span class="token string">"子组件内容"</span><span class="token punctuation">,</span>                nowIndex<span class="token punctuation">:</span><span class="token number">100</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`              &lt;ul>                &lt;li @click="nowIndex = 1" :class="{on : nowIndex == 1}">张三&lt;/li>                  &lt;li @click="nowIndex = 2" :class="{on : nowIndex == 2}">李四&lt;/li>                  &lt;li @click="nowIndex = 3" :class="{on : nowIndex == 3}">王五&lt;/li>                &lt;/ul>            `</span></span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="处理边界情况（一些特殊的情况的写法）"><a href="#处理边界情况（一些特殊的情况的写法）" class="headerlink" title="处理边界情况（一些特殊的情况的写法）"></a>处理边界情况（一些特殊的情况的写法）</h3><blockquote><p>vue中以$开头的是代表vue实例中所具有的属性或方法<br>访问元素 &amp; 组件 </p></blockquote><ol><li>访问根元素中的属性或方法<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05-vue/lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector"><span class="token class">.on</span></span><span class="token punctuation">{</span>         <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">{</span>             rootInfo<span class="token punctuation">:</span><span class="token string">"我是根元素的属性"</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token function">alerts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     components<span class="token punctuation">:</span> <span class="token punctuation">{</span>       com1 <span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token punctuation">{</span>             info<span class="token punctuation">:</span><span class="token string">"组件1"</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>         template<span class="token punctuation">:</span><span class="token string">"&lt;p>{{ info }} &lt;com2>&lt;/com2>&lt;/p>"</span><span class="token punctuation">,</span>         components<span class="token punctuation">:</span><span class="token punctuation">{</span>           com2<span class="token punctuation">:</span><span class="token punctuation">{</span>             template<span class="token punctuation">:</span><span class="token string">"&lt;p>我是组件1的子组件&lt;/p>"</span><span class="token punctuation">,</span>             created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span><span class="token function">alerts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li>访问父元素的属性或方法 this.$parent</li><li>访问子组件实例或子元素 this.$ref</li></ol><h3 id="vue的可复用性与组合"><a href="#vue的可复用性与组合" class="headerlink" title="vue的可复用性与组合"></a>vue的可复用性与组合</h3><blockquote><p>混入 混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。<br>比如 vue有可复用的属性的方法的话 可以把可复用的属性或者方法提取出来 未来有某个组件需要用到这个属性或者方法  可以把这个属性或者方法直接混入到这个组件里面</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05-vue/lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> objs <span class="token operator">=</span> <span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            info<span class="token punctuation">:</span><span class="token number">111</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是混入的对象!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//var vm = new Vue(objs);</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>objs<span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="nextTick-function-在下次-DOM-更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的-DOM。"><a href="#nextTick-function-在下次-DOM-更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的-DOM。" class="headerlink" title="nextTick(function(){}) 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。"></a>nextTick(function(){}) 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</h3><h3 id="filter过滤器-对需要的数据进行过滤操作"><a href="#filter过滤器-对需要的数据进行过滤操作" class="headerlink" title="filter过滤器 对需要的数据进行过滤操作"></a>filter过滤器 对需要的数据进行过滤操作</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>05-vue/lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list <span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ item.name }}  {{ item.age }} {{ item.money | fil1 | fil }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> that <span class="token punctuation">;</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            list<span class="token punctuation">:</span><span class="token punctuation">[</span>              <span class="token punctuation">{</span>                name <span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>                age <span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>                money<span class="token punctuation">:</span><span class="token number">100</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                name <span class="token punctuation">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>                age <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                money<span class="token punctuation">:</span><span class="token number">200</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                name <span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>                age <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>                money<span class="token punctuation">:</span><span class="token number">300</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        filters<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token function">fil1</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> val<span class="token operator">*</span><span class="token number">2</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function">fil</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> val<span class="token operator">+</span><span class="token string">"元"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是混入的对象!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="vue提供的过渡效果-Vue-在插入、更新或者移除-DOM-时，提供多种不同方式的应用过渡效果。"><a href="#vue提供的过渡效果-Vue-在插入、更新或者移除-DOM-时，提供多种不同方式的应用过渡效果。" class="headerlink" title="vue提供的过渡效果  Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。"></a>vue提供的过渡效果  Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。</h3><blockquote><p>单元素/组件的过渡 通过vue提供的组件transition来进行过渡<br>过渡的类名 </p></blockquote><ul><li><p>v-enter 定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p></li><li><p>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p></li><li><p>v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</p></li><li><p>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</p></li><li><p>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p></li><li><p>v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。<br><img src="https://cn.vuejs.org/images/transition.png" alt="图片示例" title="图片示例"></p></li><li><p>过渡小案例  渐隐渐现</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector"><span class="token class">.v-enter</span></span><span class="token punctuation">{</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.v-enter-active</span></span><span class="token punctuation">{</span>          <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">.3</span>s ease-in<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.v-enter-to</span></span><span class="token punctuation">{</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.v-leave</span></span><span class="token punctuation">{</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token selector">;      <span class="token class">.v-leave-active</span></span><span class="token punctuation">{</span>          <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">.3</span>s ease-in<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.v-leave-to</span></span><span class="token punctuation">{</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>h2标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span> <span class="token punctuation">></span></span>p标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow <span class="token punctuation">=</span> !isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>              rootInfo<span class="token punctuation">:</span><span class="token string">"我是根元素的属性"</span><span class="token punctuation">,</span>              isShow<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>              boxShow<span class="token punctuation">:</span><span class="token boolean">true</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="结合animate-css实现复杂的动画效果"><a href="#结合animate-css实现复杂的动画效果" class="headerlink" title="结合animate.css实现复杂的动画效果"></a>结合animate.css实现复杂的动画效果</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector"><span class="token class">.animated</span></span><span class="token punctuation">{</span>          <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">4</span>s!important<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://daneden.github.io/animate.css/animate.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- enter-active-class 动画进入时将要执行的类名 --></span>      <span class="token comment" spellcheck="true">&lt;!-- leave-active-class 动画离开时将要执行的类名 --></span>      <span class="token comment" spellcheck="true">&lt;!-- duration 过渡持续时间 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated fadeIn<span class="token punctuation">"</span></span> <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated fadeOut<span class="token punctuation">"</span></span>       <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ enter : 4000 , leave : 3000}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>h2标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boxShow <span class="token punctuation">=</span> !boxShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>              rootInfo<span class="token punctuation">:</span><span class="token string">"我是根元素的属性"</span><span class="token punctuation">,</span>              isShow<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>              boxShow<span class="token punctuation">:</span><span class="token boolean">true</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">alerts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6基础知识</title>
      <link href="/2018/06/20/es6-ji-chu-zhi-shi/"/>
      <url>/2018/06/20/es6-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="es6-简介"><a href="#es6-简介" class="headerlink" title="es6 简介"></a>es6 简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h3><p>ES6 新增了<code>let/const</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在let命令所在的<code>代码块内</code>有效。代码块是在大括号 <code>{}</code> 中所写的语句,if语句和 for语句里面的{ }也属于块作用域。对于var, 在<code>function</code>内部， 加var的是局部变量， 不加var的则是 全局变量；</p><ul><li>let声明变量及作用域</li></ul><p>let不存在变量提升</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这个例子表面let只在当前代码块内有效 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b is not defined</span>            <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10 </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// b is not defined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 因为上面报错 执行不了c</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 10次10</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0,1,2,3,4,5,6,7,8,9</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>let/const</li></ul><p>let/const声明的变量不能重新被定义 let 可以重新赋值  const不可以赋值 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// let i = 10;</span><span class="token comment" spellcheck="true">// let i = 11;</span><span class="token comment" spellcheck="true">// console.log(i) // Identifier 'i' has already been declared </span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>什么时候使用const 什么时候使用let</li></ul><p>如果确定值不会改变 就使用const 如果确定改变的化就使用let</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数  ES6 允许使用“箭头”（=&gt;）定义函数。箭头函数实际还是函数<br>箭头函数的写法 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol><li>不带参数的写法<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  a </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>带一个参数的写法<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> a</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>带多个参数的写法 <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>return 多行写法 <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><pre><code>5. 箭头函数的this指向 settimeout会改变this的指向 如果我们用箭头函数 箭头函数就指向父级。在setInterval和setTimeout中传入函数时，函数中的this会指向window对象。```html&lt;script&gt;var obj = {    num : 1,    add:function(){        setTimeout(() =&gt; {            console.log(this);        },300)    }};obj.add();&lt;/script&gt;</code></pre><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><p>在ES6之前，不能直接为函数的参数指定默认值，只能采取变通的方法。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    y <span class="token operator">=</span> y<span class="token operator">||</span><span class="token string">'world'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello world</span><span class="token comment" spellcheck="true">// es6 写法</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello  world</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><p>字符串拼接是开发时一个必不可少的环节，也是很恶心的一个环节，尤其是又臭又长的html字符串拼接。</p><p>为什么说html字符串拼接很恶心呢，主要有以下几点：</p><ol><li>传统的字符串拼接不能正常换行</li><li>传统的字符串拼接不能友好的插入变量 ${}</li><li>传统的字符串拼接不能友好的处理单引号、双引号互相嵌套的问题。<br>es6的模板字符串解决了以上问题</li></ol><ul><li>拼接字符串</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 以前拼接字符串</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">'&lt;ul>'</span><span class="token operator">+</span>        <span class="token string">'&lt;li cla="aaa">'</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">'&lt;/li>'</span><span class="token operator">+</span>        <span class="token string">'&lt;li>2&lt;/li>'</span><span class="token operator">+</span>    <span class="token string">'&lt;/ul>'</span>    <span class="token comment" spellcheck="true">// 现在拼接字符串</span>    <span class="token comment" spellcheck="true">// esc 下面的一个键</span>    <span class="token template-string"><span class="token string">``</span></span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;ul>        &lt;li>1&lt;/li>        &lt;li>2&lt;/li>    &lt;/ul>`</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>插入变量</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello vue`</span></span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`xxx </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> xxx`</span></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//xxx hello vue xxx</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="变量解构赋值"><a href="#变量解构赋值" class="headerlink" title="变量解构赋值"></a>变量解构赋值</h3><p>可以理解为变量的取出</p><ul><li>数组的解构赋值</li></ul><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//var a = arr[0],b = arr[1], c = arr[2];</span>    <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面代码表示，可以从数组中提取值，<code>按照对应位置</code>，对变量赋值。<br>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。<br>如果解构失败，变量的值等于undefined。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// 1</span>bar <span class="token comment" spellcheck="true">// 2</span>baz <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> third<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>third <span class="token comment" spellcheck="true">// "baz"</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// 1</span>y <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// a</span>y <span class="token comment" spellcheck="true">// undefined</span>z <span class="token comment" spellcheck="true">// undefined</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>对象的解构赋值</li></ul><p>解构不仅可以用于数组，还可以用于对象。对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。如果解构失败，变量的值等于undefined。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">// "aaa"</span>bar <span class="token comment" spellcheck="true">// "bbb"</span><span class="token keyword">let</span> <span class="token punctuation">{</span> baz <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment" spellcheck="true">// undefined</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h3><ul><li>扩展运算符<br>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为<code>用逗号分隔的参数序列</code>。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>console.log(...[1, 2, 3])// 1 2 3</code></pre></li></ul><p>console.log(1, …[2, 3, 4], 5)<br>// 1 2 3 4 5</p><p>// 常用场景 合并两个数组<br>var arr = [1,2],arrs = [3,4];<br>var newArr = […arr,…arrs];<br>console.log(newArr) // [1,2,3,4]<br></script></p><pre><code>+ Array.fromArray.from方法用于将`类对象`转为真正的数组(类数组对象比如arguments)类数组对象特点 表现像数组 却没有数组该有的方法 比如push```html&lt;script&gt;    function aa(a,b){        console.log(arguments) //Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]        arguments.push(3);        console.log(arguments) //arguments.push is not a function    }    aa(1,2)    //  想让类数组对象使用数组该有的方法 Array.from转换     function aa(a,b){        console.log(arguments) //Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]        var arr = Array.from(arguments)        arr.push(3);        console.log(arr) //arguments.push is not a function    }    aa(1,2)&lt;/script&gt;</code></pre><ul><li>find/findIndex<ul><li>find<br>数组实例的find方法，用于找出<code>第一个符合条件的数组成员</code>。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出<code>第一个返回值为true</code>的成员，然后返回该成员。<code>如果没有符合条件的成员，则返回undefined</code>。<br>find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> ele <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>findIndex<br>数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的下标，如果所有成员都不符合条件，则返回-1。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h3 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h3><ul><li>Set<br>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。<br>Set 本身是一个构造函数，用来生成 Set 数据结构。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [2 3 5 4]</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面代码通过add方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。</p><ul><li>size属性<br><code>Set.prototype.size</code>：返回Set实例的成员总数。array.length</li><li>size 方法<br><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。<br><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。 // 删除成功 返回true 否则 false<br><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为Set的成员。<br><code>Set.prototype.clear()</code>：清除 清空set数据结构</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set(4) {1, 23, 4, 5}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 </span>    s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Set(3) {23, 4, 5}</span>    <span class="token keyword">var</span> sets <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Set(0)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>Set实现数组去重 <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><ul><li>Map</li></ul><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>p<span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "content"</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>m<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>Map实例的属性和操作方法 </p><ul><li><p>size 属性<br>size属性返回 Map 结构的成员总数。</p></li><li><p>Map.prototype.set(key, value)<br>set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(1) {"aa" => "100"}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>Map.prototype.get(key)<br>get方法读取key对应的键值，如果找不到key，返回undefined。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>Map.prototype.has(key)<br>has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>Map.prototype.delete(key)<br>delete方法删除某个键，返回true。如果删除失败，返回false。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>Map.prototype.clear()<br>clear方法清除所有成员，没有返回值。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Map(0) {}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"小于6"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><p>Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了 解决了层层嵌套 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>isLogin<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>           <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    isLogin <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        code <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        token<span class="token punctuation">:</span><span class="token string">"ad31nu891nv"</span><span class="token punctuation">,</span>                        msg<span class="token punctuation">:</span><span class="token string">"登陆成功!"</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    isLogin <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> getInfo <span class="token operator">=</span> <span class="token punctuation">(</span>resolve <span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"获取用户信息成功!"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"获取失败"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>getInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="常用的数组的操作-map、filter、foreach、some、every、includs、find、findIndex-、reduce"><a href="#常用的数组的操作-map、filter、foreach、some、every、includs、find、findIndex-、reduce" class="headerlink" title="常用的数组的操作 map、filter、foreach、some、every、includs、find、findIndex 、reduce"></a>常用的数组的操作 map、filter、foreach、some、every、includs、find、findIndex 、reduce</h3><ul><li>map() JavaScript 数组map()方法主要创建一个新的数组使用调用此数组中的每个元素上所提供的函数的结果。即对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。对数据进行操作 返回新的数据</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> ele<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>newList<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4] [2,4,6,8]</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>forEach  方法对数组的每个元素执行一次提供的函数。<br>foreach 相当于for循环 对数据进行便利<br>foreach第一个特点 不能对每一项进行更改<br>第二个特点  不能终止  <pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>var array1 = ['a', 'b', 'c'];</code></pre></li></ul><p>array1.forEach(function(element) {<br>  console.log(element);<br>});</p><p>//  “a”<br>//  “b”<br>//  “c”<br></script></p><pre><code>+ filter  方法创建一个新的数组，新数组中的元素是通过`检查指定数组中符合条件的所有元素`。```html&lt;script&gt;var list = [1,2,3,4];var newList = list.filter(ele =&gt; ele &gt; 2);console.log(list,newList) // [1,2,3,4] [3,4]&lt;/script&gt;</code></pre><ul><li>every()与some()方法都是JS中数组的迭代方法。</li></ul><p>every()是对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。</p><p>some()是对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>includes 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>find和findIndex find()函数用来查找目标元素，找到就返回该元素，找不到返回undefined，而findIndex()函数也是查找目标元素，找到就返回元素的位置，找不到就返回-1。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>      <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"王小毛"</span><span class="token punctuation">,</span>      <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>      <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">var</span> item <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的是{name: "李四", gender: "男", age: 20}</span><span class="token keyword">var</span> index <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>name <span class="token operator">==</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的是索引下标：2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token punctuation">,</span> index<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><pre><code>+ reduce reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。常用用途用作求和  - total不带初始值的写法```html&lt;script&gt; var arr = [1,2,3,4];  //current  当前的元素 total 总和 var totals = arr.reduce((total,current)=&gt;{     console.log(&quot;total=&gt;&quot;,total,&quot;current=&gt;&quot;,current,)     return total = total + current }) console.log(totals)&lt;/script&gt;</code></pre><ul><li>total带初始值的写法<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> totals <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"total=>"</span><span class="token punctuation">,</span>total<span class="token punctuation">,</span><span class="token string">"current=>"</span><span class="token punctuation">,</span>current<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">return</span> total <span class="token operator">=</span> total <span class="token operator">+</span> current<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6基础 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router路由高级</title>
      <link href="/2018/06/20/vue-lu-you-gao-ji/"/>
      <url>/2018/06/20/vue-lu-you-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-router路由高级"><a href="#vue-router路由高级" class="headerlink" title="vue-router路由高级"></a>vue-router路由高级</h1><!-- 需求 --><p>比如在网页中 打开购物车页面 购物车页面只有登陆才能查看 但是呢 用户还没有登陆  没登陆直接访问登陆页面页面 登陆就直接访问购物车页面</p><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>vue-router官方解释 导航”表示路由正在发生改变。 vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。<br>理解: 导航守卫可以看做是 vue-router 的生命周期钩子 假设用户要查看个人信息(用户直接输入url进入个人信息页面) 如果没登陆是不是不让获取用户信息 但是用户已经进入了个人信息页面 这个导航守卫呢 就是帮助开发者处理这种事件</p><p>导航守卫的功能 根据判断条件处理地址栏的变化 </p><h3 id="全局守卫-只要加了全局守卫，每次路由的跳转都要经过全局守卫，一般是用的都是前置守卫"><a href="#全局守卫-只要加了全局守卫，每次路由的跳转都要经过全局守卫，一般是用的都是前置守卫" class="headerlink" title="全局守卫(只要加了全局守卫，每次路由的跳转都要经过全局守卫，一般是用的都是前置守卫)"></a>全局守卫(只要加了全局守卫，每次路由的跳转都要经过全局守卫，一般是用的都是前置守卫)</h3><blockquote><p>全局前置守卫  </p></blockquote><pre><code>router.beforeEach((to, from, next) =&gt; {     // 里面三个参数  to代表我们将要跳转的路径    // from 代表从那个路径跳转过来 就是上一个路径    // next代表 守卫可以通过next控制下一步的跳转 如果写了前置守卫 一定要添加next()到下一步     // 因为路由还没有跳转 next可以是路由跳转    // 需要注意的是 如果当跳转的地址带参数的时候(动态路由) 跳转的时候就会忽略后面传递的参数     // 如 next({path:&quot;/user&quot;,params:{id:1}})    // 解决方法 换一种写法    // next(&quot;/user/1&quot;) 或用命名路由的方式跳转next({name:&quot;user&quot;,params:{id:1}})  // ...})</code></pre><blockquote><p>全局前置守卫应用场景(进入页面登录判断、管理员权限判断、浏览器判断等)</p></blockquote><blockquote><p>全局后置守卫(没啥用)</p></blockquote><pre><code>router.afterEach((to, from) =&gt; {   })</code></pre><h3 id="路由守卫-运行在路由上的守卫-相比上面的全局守卫-全局守卫是只要有跳转就会执行守卫函数-而路由守卫呢-是只有跳转到当前的守卫时才执行路由守卫函数-用处做跳转判断"><a href="#路由守卫-运行在路由上的守卫-相比上面的全局守卫-全局守卫是只要有跳转就会执行守卫函数-而路由守卫呢-是只有跳转到当前的守卫时才执行路由守卫函数-用处做跳转判断" class="headerlink" title="路由守卫  运行在路由上的守卫  (相比上面的全局守卫 全局守卫是只要有跳转就会执行守卫函数 而路由守卫呢 是只有跳转到当前的守卫时才执行路由守卫函数) 用处做跳转判断"></a>路由守卫  运行在路由上的守卫  (相比上面的全局守卫 全局守卫是只要有跳转就会执行守卫函数 而路由守卫呢 是只有跳转到当前的守卫时才执行路由守卫函数) 用处做跳转判断</h3><pre><code>const router = new VueRouter({  routes: [    {      path: &#39;/foo&#39;,      component: Foo,      beforeEnter: (to, from, next) =&gt; {        // ...      }    }  ]})</code></pre><h3 id="组件内的守卫-也可以理解为这个组件的生命周期-与全局守卫使用方法一致"><a href="#组件内的守卫-也可以理解为这个组件的生命周期-与全局守卫使用方法一致" class="headerlink" title="组件内的守卫 (也可以理解为这个组件的生命周期 与全局守卫使用方法一致)"></a>组件内的守卫 (也可以理解为这个组件的生命周期 与全局守卫使用方法一致)</h3><blockquote><p>beforeRouteEnter 这个守卫不做什么操作 在这一步的时候this都还没有绑定到vue实例类上(组件实例还没有被创建) 也就是说在这一步我们还不能用this<br>beforeRouteUpdate  (在组件复用的时候调用 用于解决组件复用问题)<br>beforeRouteLeave (导航离开该组件的对应路由时调用 这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。 还可以用来清除定时器)</p></blockquote><pre><code>beforeRouteEnter (to, from, next) {    // 在渲染该组件的对应路由被 confirm 前调用    // 不！能！获取组件实例 `this`    // 因为当守卫执行前，组件实例还没被创建  },  beforeRouteUpdate (to, from, next) {    // 在当前路由改变，但是该组件被复用时调用    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。    // 可以访问组件实例 `this`  },  beforeRouteLeave (to, from, next) {    // 导航离开该组件的对应路由时调用    // 可以访问组件实例 `this`  }</code></pre><pre><code>beforeRouteLeave (to, from , next) {  const answer = window.confirm(&#39;Do you really want to leave? you have unsaved changes!&#39;)  if (answer) {    next()  } else {    next(false)  }}</code></pre><h3 id="路由元信息-在路由列表中，每个路由都有一个-meta-元数据字段，-我们可以在这里设置一些自定义信息，供页面组件或者路由钩子函数中使用。（如设置网页标题-设置某个页面是否需要登陆才能进入）"><a href="#路由元信息-在路由列表中，每个路由都有一个-meta-元数据字段，-我们可以在这里设置一些自定义信息，供页面组件或者路由钩子函数中使用。（如设置网页标题-设置某个页面是否需要登陆才能进入）" class="headerlink" title="路由元信息 在路由列表中，每个路由都有一个 meta 元数据字段， 我们可以在这里设置一些自定义信息，供页面组件或者路由钩子函数中使用。（如设置网页标题,设置某个页面是否需要登陆才能进入）"></a>路由元信息 在路由列表中，每个路由都有一个 meta 元数据字段， 我们可以在这里设置一些<code>自定义信息</code>，供页面组件或者路由钩子函数中使用。（如设置网页标题,设置某个页面是否需要登陆才能进入）</h3><pre><code>export default new VueRouter({  routes: [    {      path: &#39;/foo&#39;,      component: Foo,      children: [        {          path: &#39;bar&#39;,          component: Bar,          // a meta field          meta: { title: true }        }      ]    }  ]})router.beforeEach((to, from, next) =&gt; {  window.document.title = to.meta.title;  next();})</code></pre><h3 id="过渡动效-通过transition组件实现路由切换效果"><a href="#过渡动效-通过transition组件实现路由切换效果" class="headerlink" title="过渡动效 通过transition组件实现路由切换效果"></a>过渡动效 通过transition组件实现路由切换效果</h3><pre><code>&lt;transition :name=&quot;names&quot;&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/transition&gt;    .left-enter{transform: translateX(-100%);}.left-enter-active{  transition: .3s ease-in;}.right-enter{transform: translateX(100%);}.right-enter-active{  transition: .3s ease-in;}</code></pre><h3 id="滚动行为-（使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，这个时候就可以使用router的滚动行为）"><a href="#滚动行为-（使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，这个时候就可以使用router的滚动行为）" class="headerlink" title="滚动行为 （使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，这个时候就可以使用router的滚动行为）"></a>滚动行为 （使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，这个时候就可以使用router的滚动行为）</h3><blockquote><p>理解 vue在页面切换的时候 比如a页面跳转到b页面的时候 滚动条的位置是保持不变的 跟传统路由切换页面相差很大<br>如果要实现和前端路由一样的效果 这个时候就可以使用router提供的滚动行为 这个更好<a href="https://github.com/vuejs/vue-router/issues/2533" target="_blank" rel="noopener" title="官方issues">vue-router官方issues</a> (浏览器后退时返回到顶部)</p></blockquote><pre><code>scrollBehavior (to, from, savedPosition) {    return new Promise((resolve, reject) =&gt; {        setTimeout(() =&gt; {        resolve({ x: 0, y: 0 })        })    })    }</code></pre><h3 id="路由懒加载-像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。简单的说就是：进入首页不用一次加载过多资源造成用时过长！！！"><a href="#路由懒加载-像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。简单的说就是：进入首页不用一次加载过多资源造成用时过长！！！" class="headerlink" title="路由懒加载 像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。简单的说就是：进入首页不用一次加载过多资源造成用时过长！！！"></a>路由懒加载 像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。简单的说就是：进入首页不用一次加载过多资源造成用时过长！！！</h3><p>路由使用懒加载的时候 默认的会把懒加载的路由给他单独打包  这样就节省了 app.js文件的体积 那么页面首次进入的体积就不会很大 对项目加载耗时有很大的帮助</p><pre><code>component:() =&gt; import( &#39;@/view/mine/mine.vue&#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli</title>
      <link href="/2018/06/18/vue-jiao-shou-jia/"/>
      <url>/2018/06/18/vue-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli-脚手架"><a href="#vue-cli-脚手架" class="headerlink" title="vue-cli(脚手架)"></a>vue-cli(脚手架)</h2><p>使用vue开发大型项目时，需要考虑到目录结构、项目构建以及部署、热加载、代码单元化测试等事情，如果手动完成这些，效率非常低，一般情况下我们使用脚手架完成这样的工作。在vuejs的生态中，我们可以使用vue-cli来快速的构建项目。</p><h2 id="使用脚手架的好处"><a href="#使用脚手架的好处" class="headerlink" title="使用脚手架的好处"></a>使用脚手架的好处</h2><p>vue-cli是vue官方提供的脚手架工具,脚手架是基于webpack搭建的开发环境 </p><ul><li><p>可以愉快的使用es6语法而不必担心兼容问题</p></li><li><p>打包和压缩文件为一个js文件 </p></li><li><p>页面自动刷新 </p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm是安装node之后自带的一个包管理工具 安装依赖通过npm安装  npm install</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>项目运行需要的一些东西 这些东西存放在node_modules里面 把node_modules里面的文件叫做依赖</p><h2 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h2></li></ul><p>安装淘宝镜像之后 我们安装依赖的时候就国内镜像里面安装 </p><h3 id="搭建vue-cli开发环境"><a href="#搭建vue-cli开发环境" class="headerlink" title="搭建vue-cli开发环境"></a>搭建vue-cli开发环境</h3><ol><li><p>在命令行里面输入下面这个命令 这个命令是用来安装vue-cli</p><pre><code>cnpm install -g @vue/cli</code></pre></li><li><p>判断是否安装成功 在命令行工具里面输入 vue -V 敲回车会出现vue的版本 如果出现版本就代表安装成功</p></li><li><p>创建vue的项目  vue create my-project</p></li><li><p>cd my-project 进入刚刚创建的项目</p></li><li><p>npm run serve 运行刚刚创建的项目</p></li></ol><h3 id="群文件下载的项目"><a href="#群文件下载的项目" class="headerlink" title="群文件下载的项目"></a>群文件下载的项目</h3><ol><li>首先把群文件里面的文件下载到自己的工作区域</li><li>下载完成之后在项目的根目录打开cmd  输入cnpm install 这一步代表安装项目运行所需要的依赖 </li><li>安装依赖完成之后 输入 npm run serve 运行项目 会打开一个端口 项目就运行在这个端口里面<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3></li></ol><ul><li>node_modules 这个是安装依赖所存放的目录</li><li>public 项目index.html所存放的目录</li><li>src  工作目录  </li><li>assets 存放的静态资源目录 </li><li>components 存放的是公共组件的目录 存放的是封装的全局组件</li><li>views 存放的是一个一个单独的页面<br>views 页面规范 <ul><li>views存放的是单独的页面  </li><li>页面可以理解为views下的文件夹 比如home文件夹代表home页面 </li><li>页面由多个组件拼凑而成 </li><li>多个组件存放的位置 在当前页面的components文件夹里面</li></ul></li><li>App.vue 是我们的项目一个根组件  其他页面会渲染到我们App.vue里面</li><li>main.js 项目的入口文件 是一个配置文件 脚手架根据main.js文件运行项目 脚手架内置了webpack main.js是webpack的配置文件</li><li>router.js 创建页面的配置文件 </li><li>store.js 状态管理工具</li><li>.gitignore 提交git的时候忽略的文件</li><li>babel.config.js  把es6的代码转换成es5 的babel配置文件</li><li>package.json 是包管理配置文件 存放的是项目运行所需要的依赖<ul><li>script 标签里面存放的是命令配置  执行的时候执行npm run + 命令<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3></li></ul></li></ul><p>vue-cli内置集成了webpack  webpack能css、js、页面、image、video字体文件等打包成一个js文件 这个js文件会动态的插入到public里面的index.html里面 webpack首先默认查找main.js 根据main.js里面的配置 把这些东西打包进app.js里面</p><h3 id="es6模块化"><a href="#es6模块化" class="headerlink" title="es6模块化"></a>es6模块化</h3><p>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p><ul><li>export 导出模块<br>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> str  <span class="token operator">=</span> <span class="token string">"张三"</span> <span class="token punctuation">;</span><span class="token keyword">var</span> fuc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string">'Michael'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string">'Jackson'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">1958</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>  str<span class="token punctuation">,</span>  fuc<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><pre><code>+ import 导入模块 使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。```html&lt;script&gt;import {str , fuc} from &quot;./exports.js&quot;;console.log(str,fuc() ,&quot;111111&quot;)&lt;/script&gt;</code></pre><ul><li>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> lastName <span class="token keyword">as</span> surname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./profile.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>surname<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><ul><li>模块的整体加载<br>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 下面是一个circle.js文件，它输出两个方法area和circumference。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// circle.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">circumference</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 现在，加载这个模块。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> area<span class="token punctuation">,</span> circumference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./circle.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'圆面积：'</span> <span class="token operator">+</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'圆周长：'</span> <span class="token operator">+</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面写法是逐一指定要加载的方法，整体加载的写法如下。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 现在，加载这个模块。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> circle <span class="token keyword">from</span> <span class="token string">'./circle'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'圆面积：'</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'圆周长：'</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">circumference</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><code>export default</code> 命令 </li></ul><p>从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 比较export 和 export default 的写法  </span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输出</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">import</span> crc32 <span class="token keyword">from</span> <span class="token string">'crc32'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">crc32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输出</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>crc32<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'crc32'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="单页面应用-SinglePage-Web-Application-SPA-只有一张Web页面的应用"><a href="#单页面应用-SinglePage-Web-Application-SPA-只有一张Web页面的应用" class="headerlink" title="单页面应用(SinglePage Web Application,SPA)只有一张Web页面的应用"></a>单页面应用(SinglePage Web Application,SPA)只有一张Web页面的应用</h3><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p> .vue文件，称为单文件组件，是Vue.js自定义的一种文件格式，一个.vue文件就是一个单独的组件，在文件内封装了组件相关的代码：html、css、js,vue-cli内置集成了scss 可以直接使用 , 一个页面由多个单文件组成</p><h3 id="单文件组成"><a href="#单文件组成" class="headerlink" title="单文件组成"></a>单文件组成</h3><ul><li>template<br>页面</li><li>style<br>样式</li><li>script<br>js</li></ul><h3 id="单页面与多页面"><a href="#单页面与多页面" class="headerlink" title="单页面与多页面"></a>单页面与多页面</h3><p>vue-cli生成的项目叫单页面应用 spa</p><ul><li>单页面<br>单页面应用（SPA），通俗一点说就是指只有一个主页面的应用，浏览器一开始要加载所有必须的 html, js, css。所有的页面内容都包含在这个所谓的主页面中。但在写的时候，还是会分开写（页面片段），然后在交互的时候由路由程序动态载入，单页面的页面跳转，仅刷新局部资源。单页面应用跳转的时候不会请求服务器。</li><li>多页面<br>多页面（MPA），就是指一个应用中有多个页面，页面跳转时是整页刷新</li></ul><h3 id="单页面优点"><a href="#单页面优点" class="headerlink" title="单页面优点"></a>单页面优点</h3><ul><li><p>用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点spa对服务器压力较小</p></li><li><p>前后端分离</p></li><li><p>页面效果会比较炫酷（比如切换页面内容时的专场动画）transition</p></li></ul><h3 id="单页面缺点"><a href="#单页面缺点" class="headerlink" title="单页面缺点"></a>单页面缺点</h3><ul><li><p>不利于seo  vue的项目首先不考虑seo vue react angular 创建的项目对seo都是不友好的</p></li><li><p>初次加载时耗时多(在一进入页面的是就加载了项目的所有文件 ，在后面可以优化)</p></li><li><p>页面复杂度提高很多</p></li></ul><h3 id="其他注意事项-scoped"><a href="#其他注意事项-scoped" class="headerlink" title="其他注意事项  @  scoped"></a>其他注意事项  @  scoped</h3><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>vue-cli重构品牌列表  及安装swiper及使用<br><a href="https://segmentfault.com/a/1190000014609379" target="_blank" rel="noopener" title="轮播">轮播</a></p><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>在脚手架中重构图片弹窗</p><h3 id="dependencies-和-devDependencies"><a href="#dependencies-和-devDependencies" class="headerlink" title="dependencies 和 devDependencies"></a>dependencies 和 devDependencies</h3><p>dependencies项目开发和打包的时候都需要用到的依赖 npm install 依赖 –save<br>devDependencies 是项目开发的时候需要用到的依赖 打包的时候就没有了  npm install 依赖 –save-dev</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>router</title>
      <link href="/2018/06/14/vue-lu-you/"/>
      <url>/2018/06/14/vue-lu-you/</url>
      
        <content type="html"><![CDATA[<h2 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h2><p>路由简单的理解 可以理解为浏览器地址栏的变化过程</p><h3 id="路由简介"><a href="#路由简介" class="headerlink" title="路由简介"></a>路由简介</h3><ul><li><p>传统的路由指的是：当用户访问一个url时，对应的服务器会接收这个请求，然后解析url中的路径，从而执行对应的处理逻辑。这样就完成了一次路由分发。<br>通俗理解 : 比如向浏览器地址栏输入地址 对应服务器根据这个地址返回返回数据(html css js等) 输入地址就是请求服务器的资源 这一输入地址返回对应数据叫做传统路由<br>传统路由向服务器请求数据 请求数据需要刷新页面<br>ajax局部刷新</p></li><li><p>而前端路由是不涉及服务器的，是前端利用hash或者HTML5的history API来模拟实现的，一般用于不同内容的展示和切换(利用ajax来实现资源的更新)。<br>前端路由请求页面的时候不会向服务器请求数据 页面是由js创建完成的 router.js</p></li><li><p>目前Vue 推荐单页面应用 SPA 开发模式，大型单页应用最显著特点之一就是采用前端路由系统，通过改变URL，在不重新请求页面的情况下，更新页面视图。Vue中的路由解决方案为vue-router。</p></li><li><p>前端路由页面间的切换是组件之间的切换 不涉及服务器</p><blockquote><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。我们用vue-cli开发的项目就是单页面应用。</p></blockquote><h3 id="vue路由能实现哪些功能"><a href="#vue路由能实现哪些功能" class="headerlink" title="vue路由能实现哪些功能"></a>vue路由能实现哪些功能</h3></li><li><p>嵌套的路由/视图表</p></li><li><p>模块化的、基于组件的路由配置</p></li><li><p>路由参数、查询、通配符</p></li><li><p>基于 Vue.js 过渡系统的视图过渡效果</p></li><li><p>细粒度的导航控制</p></li><li><p>带有自动激活的 CSS class 的链接</p></li><li><p>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</p></li><li><p>自定义的滚动条行为</p><h3 id="路由安装-我们在vue-cli创建项目的时候就默认安装路由"><a href="#路由安装-我们在vue-cli创建项目的时候就默认安装路由" class="headerlink" title="路由安装 (我们在vue-cli创建项目的时候就默认安装路由)"></a>路由安装 (我们在vue-cli创建项目的时候就默认安装路由)</h3></li></ul><h3 id="npm安装vue路由"><a href="#npm安装vue路由" class="headerlink" title="npm安装vue路由"></a>npm安装vue路由</h3><blockquote><p>这一步是安装路由 保存到我们package.json 里面的dependencies里面</p></blockquote><pre><code>cnpm install vue-router --save</code></pre><h3 id="路由起步"><a href="#路由起步" class="headerlink" title="路由起步"></a>路由起步</h3><blockquote><p>配置路由文件</p></blockquote><ol><li>在main.js的同级目录新建一个router的文件夹(这个文件夹存放的是我们路由的配置文件)</li><li>在这个文件夹下创建index.js 里面写上<pre><code>import Vue from &#39;vue&#39;import Router from &#39;vue-router&#39;</code></pre></li></ol><p>Vue.use(Router)<br>// 上面三个是引入vue-router(你安装路由之后不引入相当于做无用功)<br>export default new Router({  // 把我们的路由配置文件暴露出去<br>  mode: ‘history’,<br>  // vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。如果不想/// 要很丑的 hash，我们可以用路由的 history 模式<br>  routes: [  // 这个存放的是我们路由的配置文件</p><p>  ]<br>})</p><pre><code>3. 在view目录下新建两个文件夹 一个是index 一个是mine 这个文件夹代表两个页面(这个一个规范)  一个是index页面 一个是mine页面 分别在mine和index下面新建index.vue (创建我们的组件) 里面分别写上内容 &#39;首页&#39; &#39;mine页&#39;![项目结构](&quot;https://raw.githubusercontent.com/208895638/teachVue/master/%E6%88%AA%E5%9B%BE/vue%E7%9B%AE%E5%BD%95%E6%88%AA%E5%9B%BE.jpg&quot; &quot;项目结构&quot;)4. 在我们的router文件夹下的index.js里面引入我们的组件</code></pre><p>import index from “@/views/index/index” // 引入index组件<br>import mine from “@/views/mine/index” // 引入mine组件</p><pre><code>5. 配置路由</code></pre><p>export default new Router({<br>  mode: ‘history’,  // 启用history路由<br>  routes: [ // 这里面是路由的配置项<br>    {<br>      path: ‘/‘,  // 这个是我们访问浏览器的地址<br>      name: ‘index’,  // 这个是我们给路由起的名称<br>      component: index  // 这个是 地址对应的组件<br>    },<br>    {<br>      path: ‘/mine’, // 这个是我们访问浏览器的地址<br>      name: ‘mine’,  // 这个是我们给路由起的名称<br>      component: mine  // 这个是 地址对应的组件<br>    }<br>  ]<br>})</p><pre><code>6. 上一步就代表路由配置完成 我们需要把我们的路由配置挂载到我们的vue实例上 在main.js里面操作</code></pre><p>import Vue from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router/index’  // 引入我们刚刚配置的路由文件<br>Vue.config.productionTip = false<br>new Vue({<br>  router, // 把路由挂载到vue实例上<br>  render: h =&gt; h(App)<br>}).$mount(‘#app’)</p><pre><code>7. 最后一步 在我们的app.vue里面加一个组件router-view</code></pre><p><router-link to="/">跳转到首页</router-link><br><router-link :to="{path:'/'}">跳转到首页</router-link><br>    <router-link to="/mine">跳转到mine页</router-link></p><pre><code>&lt;router-view&gt;&lt;/router-view&gt;</code></pre><pre><code>router-view这个组件是一个容器 我们页面的路由所对应的组件都渲染在这个容器里面router-link是在vue里面做跳转链接用的 vue会把router-link渲染成a标签8. 好了 一个最基本的路由完成 ### 自动激活的 CSS class 的链接 当router-link 里面的to地址与地址栏中的路由匹配一样时就自动激活router-link-active如当前路由为 /home 而&lt;router-link to=&quot;/home&quot; exact&gt;&lt;/router-link&gt; router-link-active这个class名称就会自动被激活&gt; 自定义激活class名称  linkActiveClass</code></pre><p>export default new Router({<br>  mode: ‘history’,  // 启用history路由<br>  linkActiveClass:”r-active”,  // 这个就是设置激活是的class名称<br>  routes: [ // 这里面是路由的配置项<br>    {<br>      path: ‘/‘,  // 这个是我们访问浏览器的地址<br>      name: ‘index’,  // 这个是我们给路由起的名称<br>      component: index  // 这个是 地址对应的组件<br>    },<br>  ]<br>})</p><pre><code>###  路由传递参数 + 动态路由&lt;!-- /a/b/chome --&gt; 简介 我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果：+ 配置动态路由</code></pre><p>{<br>    path : “/mine/:id”, // 动态路由<br>    name : “mine” ,<br>    component: mine<br>}</p><pre><code>使用的时候 会自动匹配1，2，3，4 到mine组件</code></pre><p><router-link to="/mine/1">跳转到mine页</router-link><br><router-link to="/mine/2">跳转到mine页</router-link><br><router-link to="/mine/3">跳转到mine页</router-link><br><router-link to="/mine/4">跳转到mine页</router-link><br><router-link :to="{name:'mine',params:{id:1}}">跳转到mine页</router-link><br>这里需要注意的一点就是 当路由是动态路由的时候我们得用命名路由的方式跳转</p><pre><code>+ query传值直接在路由后面传递需要传递的参数获取这个参数 可以使用 this.$route.query $route 当前路由对象</code></pre><p><router-link to="/user?username='张三'&age='40'&sex='男'" tag="h2">跳转到user页</router-link></p><pre><code>### 嵌套路由 &gt; 简介 实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各：```段动态路径也按某种结构对应嵌套的各层组件，例如/user/profile                     /user/posts+------------------+                  +-----------------+| User             |                  | User            || +--------------+ |                  | +-------------+ || | Profile      | |  +------------&gt;  | | Posts       | || |              | |                  | |             | || +--------------+ |                  | +-------------+ |+------------------+                  +-----------------+</code></pre><blockquote><p>嵌套路由的写法</p></blockquote><pre><code>const router = new VueRouter({  routes: [    { path: &#39;/user&#39;, component: User,redirect:&quot;/user/profile&quot;      children: [        {          // 当 /user/profile 匹配成功，          // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中          path: &#39;profile&#39;,          component: UserProfile        },        {          // 当 /user/posts 匹配成功          // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中          path: &#39;posts&#39;,          component: UserPosts        }      ]    }  ]})</code></pre><h3 id="编程式的导航-除了使用-创建-a-标签来定义导航链接-我们还可以用js的方法跳转页面"><a href="#编程式的导航-除了使用-创建-a-标签来定义导航链接-我们还可以用js的方法跳转页面" class="headerlink" title="编程式的导航 除了使用  创建 a 标签来定义导航链接 我们还可以用js的方法跳转页面"></a>编程式的导航 除了使用 <router-link> 创建 a 标签来定义导航链接 我们还可以用js的方法跳转页面</h3><pre><code>// 字符串router.push(&#39;home&#39;)// 对象router.push({ path: &#39;home&#39; })// 命名的路由router.push({ name: &#39;user&#39;, params: { userId: &#39;123&#39; }})// 带查询参数，变成 /register?plan=privaterouter.push({ path: &#39;register&#39;, query: { plan: &#39;private&#39; }})</code></pre><pre><code>// 在浏览器记录中前进一步，等同于 history.forward()router.go(1)// 后退一步记录，等同于 history.back()router.go(-1)// 前进 3 步记录router.go(3)// 如果 history 记录不够用，那就默默地失败呗router.go(-100)router.go(100)</code></pre><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><blockquote><p>简介<br>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。</p></blockquote><pre><code>const router = new VueRouter({  routes: [    {      path: &#39;/user/:userId&#39;,      name: &#39;user&#39;,      component: User    }  ]})要链接到一个命名路由，可以给 router-link 的 to 属性传一个对象：&lt;router-link :to=&quot;{ name: &#39;user&#39;, params: { userId: 123 }}&quot;&gt;User&lt;/router-link&gt;router.push({ name: &#39;user&#39;, params: { userId: 123 }})</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><blockquote><p>重定向  把地址重定向到某个路由 重定向”的意思是，当用户访问 /a时，URL 将会被替换成 /b，然后匹配路由为 /b</p></blockquote><pre><code>const router = new VueRouter({  routes: [    { path: &#39;/a&#39;, redirect: &#39;/b&#39; }  ]})</code></pre><h3 id="html5-History模式"><a href="#html5-History模式" class="headerlink" title="html5 History模式"></a>html5 History模式</h3><blockquote><p>简介<br>vue-router 默认 hash 模式(特点 #/) —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p></blockquote><p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。<br>当使用 history 模式时，URL 就像正常的 url，例如 <a href="http://yoursite.com/user/id，也好看！" target="_blank" rel="noopener">http://yoursite.com/user/id，也好看！</a><br>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id" target="_blank" rel="noopener">http://oursite.com/user/id</a> 就会返回 404。</p><p><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90</a></p><blockquote><p>解决方法<br>在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
